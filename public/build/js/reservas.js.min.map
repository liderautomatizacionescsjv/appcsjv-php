{"version":3,"sources":["reservas.js"],"names":["loadCarros","sedeSeleccionada","document","getElementById","value","carroSelect","innerHTML","fetch","then","response","json","data","console","log","Array","isArray","length","forEach","carro","div","createElement","className","textContent","nombre","totalpc","dataset","carroId","id","capacidad","onclick","selectCarro","appendChild","error","catch","iniciarCalendario","calendarEl","FullCalendar","Calendar","initialView","nowIndicator","locale","headerToolbar","left","center","right","slotMinTime","slotMaxTime","businessHours","daysOfWeek","startTime","endTime","weekends","allDaySlot","render","abrirModalReserva","style","display","cerrarModalReserva","carroElement","querySelectorAll","item","classList","remove","add","disabled","loadCalendar","window","calendarInstance","destroy","events","eventClick","info","event","abrirModalDetalleReserva","extendedProps","grupo","responsable","fechaReserva","start","toISOString","split","horaInicio","toLocaleTimeString","hour","minute","horaFin","end","cantidadComputadores","nombre_carro","eventColor","selectedCarro","querySelector","alert","reserva","innerText","disponibles","cerrarModalDetalleReserva","addEventListener","preventDefault","fecha","method","headers","Content-Type","body","JSON","stringify","result","status","message"],"mappings":"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","file":"reservas.js","sourcesContent":["document.addEventListener(\"DOMContentLoaded\", function () {\n    if (document.getElementById(\"calendar\")) {\n        iniciarCalendario();\n    }\n\n    if (document.getElementById(\"sede\")) {\n        document.getElementById(\"sede\").addEventListener(\"change\", loadCarros);\n    }\n});\n\n\nfunction loadCarros() {\n    const sedeSeleccionada = document.getElementById(\"sede\").value;\n    const carroSelect = document.getElementById(\"carroSelect\");\n\n    carroSelect.innerHTML = \"\"; // Limpiar antes de agregar nuevos datos\n\n    if (!sedeSeleccionada) return;\n\n    fetch(`http://localhost:3002/api/carros?sede=${sedeSeleccionada}`)  // Cambiar a `/reservas/carros?sede=Medellín` si usas ReservaController\n        .then(response => response.json())\n        .then(data => {\n            console.log(\"Datos recibidos de la API:\", data);\n            if (!Array.isArray(data)) {\n                console.error(\"Error: La API no devolvió un array:\", data);\n                return;\n            }\n            if (data.length === 0) {\n                carroSelect.innerHTML = \"<p>No hay carros disponibles en esta sede.</p>\";\n                return;\n            }\n\n            data.forEach(carro => {\n                const div = document.createElement(\"div\");\n                div.className = \"carro-item\";\n                div.textContent = `${carro.nombre} (${carro.totalpc} PC)`;\n                div.dataset.carroId = carro.id;\n                div.dataset.capacidad = carro.totalpc;\n                div.onclick = () => selectCarro(div);\n\n                carroSelect.appendChild(div);\n            });\n        })\n        .catch(error => console.error(\"Error al cargar carros:\", error));\n}\n\n\n\n\n// Iniciar el calendario con FullCalendar\nfunction iniciarCalendario() {\n    var calendarEl = document.getElementById('calendar');\n    const calendar = new FullCalendar.Calendar(calendarEl, {\n        initialView: 'timeGridWeek',\n        nowIndicator: true,\n        locale: 'es',\n        headerToolbar: {\n            left: 'prev,next today',\n            center: 'title',\n            right: 'timeGridWeek,timeGridDay'\n        },\n        slotMinTime: '07:00:00',\n        slotMaxTime: '17:00:00',\n        businessHours: {\n            daysOfWeek: [1, 2, 3, 4, 5], // Lunes a Viernes\n            startTime: '07:00',\n            endTime: '17:00',\n        },\n        weekends: false,\n        allDaySlot: false,\n    });\n\n    calendar.render();\n}\n\n// Función para abrir el modal de reserva\nfunction abrirModalReserva() {\n    document.getElementById(\"modalReserva\").style.display = \"block\";\n}\n\n// Función para cerrar el modal de reserva\nfunction cerrarModalReserva() {\n    document.getElementById(\"modalReserva\").style.display = \"none\";\n}\n\n\nfunction selectCarro(carroElement) {\n    // Deseleccionar cualquier carro previamente seleccionado\n    document.querySelectorAll('.carro-item').forEach(item => item.classList.remove('selected'));\n\n    // Seleccionar el carro actual\n    carroElement.classList.add('selected');\n\n    // Guardar el ID del carro seleccionado\n    const carroId = carroElement.dataset.carroId;\n\n    // Habilitar el botón de reservar\n    document.getElementById('abrirModalReservaBtn').disabled = false;\n\n    // Cargar el calendario con las reservas de este carro\n    loadCalendar(carroId);\n}\n\n\nfunction loadCalendar(carroId) {\n    fetch(`http://localhost:3002/api/reservas?carro_id=${carroId}`)\n        .then(response => response.json())\n        .then(data => {\n            console.log(\"Reservas recibidas para el calendario:\", data);\n\n            if (!Array.isArray(data)) {\n                console.error(\"Error: La API no devolvió un array:\", data);\n                return;\n            }\n\n            const calendarEl = document.getElementById('calendar');\n\n            // Si ya existe un calendario, primero lo destruye\n            if (window.calendarInstance) {\n                window.calendarInstance.destroy();\n            }\n\n            window.calendarInstance = new FullCalendar.Calendar(calendarEl, {\n                initialView: 'timeGridWeek',\n                nowIndicator: true,\n                locale: 'es',\n                headerToolbar: {\n                    left: 'prev,next today',\n                    center: 'title',\n                    right: 'timeGridWeek,timeGridDay'\n                },\n                slotMinTime: '07:00:00',\n                slotMaxTime: '17:00:00',\n                businessHours: {\n                    daysOfWeek: [1, 2, 3, 4, 5], // Lunes a Viernes\n                    startTime: '07:00',\n                    endTime: '17:00',\n                },\n                weekends: false,\n                allDaySlot: false,\n                events: data,  // 📌 Se pasa la información desde la API\n\n                eventClick: function(info) {\n                    const event = info.event;\n                    abrirModalDetalleReserva({\n                        carro: event.extendedProps.carro,\n                        grupo: event.extendedProps.grupo,\n                        responsable: event.extendedProps.responsable,\n                        fechaReserva: event.start.toISOString().split('T')[0],\n                        horaInicio: event.start.toLocaleTimeString('es-CO', { hour: '2-digit', minute: '2-digit' }),\n                        horaFin: event.end.toLocaleTimeString('es-CO', { hour: '2-digit', minute: '2-digit' }),\n                        cantidadComputadores: event.extendedProps.cantidadComputadores,\n                        nombre_carro: event.extendedProps.nombre_carro // 📌 Se agrega el nombre del carro\n                    });\n                },\n\n                eventColor: '#ffa81d'\n            });\n\n            window.calendarInstance.render();\n        })\n        .catch(error => console.error(\"Error al cargar reservas en el calendario:\", error));\n}\n\n\n\n\n\nfunction abrirModalReserva() {\n    const selectedCarro = document.querySelector('.carro-item.selected');\n    if (!selectedCarro) {\n        alert('Debes seleccionar un carro antes de reservar.');\n        return;\n    }\n\n    // Guardar el carro en el formulario de reserva\n    document.getElementById('formReserva').dataset.carroId = selectedCarro.dataset.carroId;\n\n    document.getElementById(\"modalReserva\").style.display = \"block\";\n}\n\n\nfunction abrirModalDetalleReserva(reserva) {\n    console.log(\"Reserva seleccionada:\", reserva); // 🛠️ Depuración\n    document.getElementById('detalleCarro').innerText = reserva.nombre_carro;\n    document.getElementById('detalleGrupo').innerText = reserva.grupo;\n    document.getElementById('detalleResponsable').innerText = reserva.responsable;\n    document.getElementById('detalleHoraInicio').innerText = reserva.horaInicio;\n    document.getElementById('detalleHoraFin').innerText = reserva.horaFin;\n    document.getElementById('detalleCantidadComputadores').innerText = reserva.cantidadComputadores;\n    document.getElementById('detalleComputadoresDisponibles').innerText = reserva.disponibles;\n    document.getElementById('modalDetalleReserva').style.display = 'block';\n}\n\nfunction cerrarModalDetalleReserva() {\n    document.getElementById('modalDetalleReserva').style.display = 'none';\n}\n\n\n\n// document.getElementById('horaInicio').addEventListener('change', verificarDisponibilidad);\n// document.getElementById('horaFin').addEventListener('change', verificarDisponibilidad);\n\n// function verificarDisponibilidad() {\n//     const carroId = document.querySelector('.carro-item.selected')?.dataset.carroId;\n//     const horaInicio = document.getElementById('horaInicio').value;\n//     const horaFin = document.getElementById('horaFin').value;\n//     const disponibilidadMensaje = document.getElementById('disponibilidad');\n//     const cantidadComputadoresInput = document.getElementById('cantidadComputadores');\n//     const botonReservar = document.querySelector('#formReserva button[type=\"submit\"]');\n\n//     if (!carroId || !horaInicio || !horaFin) {\n//         disponibilidadMensaje.textContent = \"Seleccione una hora válida.\";\n//         return;\n//     }\n\n//     fetch(`http://localhost:3002/api/disponibilidad?carro_id=${carroId}&horaInicio=${horaInicio}&horaFin=${horaFin}`)\n//         .then(response => response.json())\n//         .then(data => {\n//             console.log(\"Disponibilidad recibida:\", data);\n\n//             if (data.error) {\n//                 disponibilidadMensaje.textContent = data.error;\n//                 botonReservar.disabled = true;\n//                 return;\n//             }\n\n//             const disponibles = data.computadoresDisponibles;\n//             const reservados = data.computadoresReservados;\n//             const total = data.totalComputadores;\n\n//             if (disponibles > 0) {\n//                 disponibilidadMensaje.textContent = `Computadores disponibles: ${disponibles} | Reservados: ${reservados}`;\n//                 botonReservar.disabled = false;\n//                 cantidadComputadoresInput.max = disponibles; // Limita la cantidad seleccionable\n//             } else {\n//                 disponibilidadMensaje.textContent = \"Carro no disponible, todos los equipos están reservados.\";\n//                 botonReservar.disabled = true;\n//             }\n//         })\n//         .catch(error => console.error(\"Error al verificar disponibilidad:\", error));\n// }\n\n\n\n\n// ----------------- RESERVAR ----------------\n\n\ndocument.getElementById('formReserva').addEventListener('submit', function(event) {\n    event.preventDefault(); // Evita que recargue la página\n\n    const selectedCarro = document.querySelector('.carro-item.selected');\n    if (!selectedCarro) {\n        alert('Debes seleccionar un carro antes de reservar.');\n        return;\n    }\n\n    const data = {\n        carro: selectedCarro.dataset.carroId,\n        fecha: document.getElementById('fechaReserva').value,\n        horaInicio: document.getElementById('horaInicio').value,\n        horaFin: document.getElementById('horaFin').value,\n        cantidadComputadores: document.getElementById('cantidadComputadores').value,\n        grupo: document.getElementById('grupo').value\n    };\n\n    console.log(data);\n\n    fetch('http://localhost:3002/api/reservas/crear', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data)\n    })\n    .then(response => response.json())\n    .then(result => {\n        if (result.status === 'success') {\n            alert('Reserva realizada con éxito.');\n            cerrarModalReserva();\n            loadCalendar(selectedCarro.dataset.carroId); // Recargar el calendario con las nuevas reservas\n        } else {\n            alert('Error al reservar: ' + result.message);\n        }\n    })\n    .catch(error => console.error(\"Error al realizar la reserva:\", error));\n});\n"]}