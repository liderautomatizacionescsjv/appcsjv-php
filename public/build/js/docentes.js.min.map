{"version":3,"sources":["docentes.js"],"names":["estudiante_sel","codigo","fecha","grupo","reporte","hoy","Date","toISOString","split","estudiante_global","grupos_global","reportes_global","estadoGrupos","async","cargarEstadoGrupos","respuesta","fetch","json","console","log","error","iniciarApp","consultarApi","consultarReportes","cargarAsignaciones","verificarEstadoGrupo","url","asignaciones","selectGrupos","document","getElementById","selectAsignaturas","innerHTML","forEach","asignacion","nombre_grupo","opcionGrupo","createElement","value","grupoid","textContent","appendChild","nombre_asignatura","opcionAsignatura","cursoid","resultado","mostrarEstudiantes","addEventListener","filtrarEstudiantes","mostrarReportes","mostrarGrupos","grupos","nombre","id","nombreGrupo","querySelector","registros","tabla","sort","a","b","fechahora","registro","estudiante","comentario","responsable","codigoid","fila","r_estudiante","r_reporte","r_comentario","r_responsable","r_asignatura","r_fecha","r_grupo","r_acciones","botonEliminar","classList","add","onclick","eliminarReporte","estudiantes","documento","fechaNacimiento","estado","nombreEstudiante","estadoEstudiante","remove","botonFalta","event","stopPropagation","registrarNovedad","botonTarde","botonExcusa","ficha","dataset","idFicha","removerSeleccion","verEstudiante","acciones","info","mostrarNotificacion","mensaje","contenedor","notificacion","setTimeout","grupoSeleccionado","estudiantesFiltrados","filter","est","filtrarReportesPorEstudiante","codigoEstudiante","reportesFiltrados","String","filtrarTabla","columna","filtro","querySelectorAll","toUpperCase","filas","getElementsByTagName","i","length","celda","textoCelda","innerText","style","display","indexOf","info_nombre","info_codigo","info_documento","info_fechaNacimiento","info_grado","iniciarCalendario","calendarEl","FullCalendar","Calendar","initialView","locale","events","render","abrirModalReserva","cerrarModalReserva","asignaturaSeleccionada","datos","FormData","append","method","body","confirm","formData","ok","Error","warn","grupoId","botonGrupoCompleto","find","g","idgrupo","completo","disabled","alert","fechaActual","exito"],"mappings":"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","file":"docentes.js","sourcesContent":["// VARIABLES\n\nconst estudiante_sel = {\n    codigo: '',\n    fecha: '',\n    grupo: '',\n    reporte: ''\n}\n\nconst hoy = new Date().toISOString().split('T')[0];\n\nlet estudiante_global = []\nlet grupos_global = []\nlet reportes_global = []\nlet estadoGrupos = []; // Variable para almacenar el estado de los grupos\n\n\n// DOM\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    iniciarApp();\n    cargarEstadoGrupos(); // Cargaar el estado de los grupos al inicio\n});\n\n\nasync function cargarEstadoGrupos() {\n    try {\n        const respuesta = await fetch(\"https://sjvacademia.com/api/estado-grupos\");\n        estadoGrupos = await respuesta.json(); // Guardar el estado de los grupos\n        console.log(\"Estado de los grupos:\", estadoGrupos);\n    } catch (error) {\n        console.error(\"Error al cargar el estado de los grupos:\", error);\n    }\n}\n\nfunction iniciarApp(){\n    // consultarGrupos();\n    consultarApi();\n    consultarReportes();\n    cargarAsignaciones();\n    verificarEstadoGrupo(); // Verificar el estado del grupo seleccionado\n\n}\n\n\n\n// CONSULTAS\n\n// async function consultarGrupos(){\n//     try {\n//         const url = 'https://sjvacademia.com/api/grupos';\n//         const resultado = await fetch(url);\n//         grupos_global = await resultado.json();\n\n//         mostrarGrupos(grupos_global);\n\n//     } catch (error) {\n//         console.log(error);\n//     }\n// }\n\nasync function cargarAsignaciones() {\n    try {\n        const url = 'https://sjvacademia.com/api/asignaciones';\n        const respuesta = await fetch(url);\n        const asignaciones = await respuesta.json();\n\n        // console.log(\"Asignaciones recibidas:\", asignaciones);\n\n        // Seleccionar los elementos del DOM\n        const selectGrupos = document.getElementById(\"grupos\");\n        const selectAsignaturas = document.getElementById(\"asignatura\");\n\n        if (!selectGrupos || !selectAsignaturas) {\n            console.error(\"Error: No se encontraron los elementos select en el DOM.\");\n            return;\n        }\n\n        // Limpiar los selectores antes de agregar opciones\n        selectGrupos.innerHTML = `<option value=\"\">--Seleccione--</option>`;\n        selectAsignaturas.innerHTML = `<option value=\"\">--Seleccione--</option>`;\n\n        // Llenar los selectores con los datos recibidos de la API\n        asignaciones.forEach(asignacion => {\n            if (asignacion.nombre_grupo) {\n                const opcionGrupo = document.createElement(\"option\");\n                opcionGrupo.value = asignacion.grupoid;\n                opcionGrupo.textContent = asignacion.nombre_grupo;\n                selectGrupos.appendChild(opcionGrupo);\n            }\n\n            if (asignacion.nombre_asignatura) {\n                const opcionAsignatura = document.createElement(\"option\");\n                opcionAsignatura.value = asignacion.cursoid;\n                opcionAsignatura.textContent = asignacion.nombre_asignatura;\n                selectAsignaturas.appendChild(opcionAsignatura);\n            }\n        });\n\n        // console.log(\"Opciones de grupos agregadas:\", selectGrupos.innerHTML);\n        // console.log(\"Opciones de asignaturas agregadas:\", selectAsignaturas.innerHTML);\n\n    } catch (error) {\n        console.error(\"Error al cargar asignaciones:\", error);\n    }\n}\n\n\n\n\n\n\nasync function consultarApi(){\n    try {\n        const url = 'https://sjvacademia.com/api/estudiantes';\n        const resultado = await fetch(url);\n        estudiante_global = await resultado.json();\n\n        mostrarEstudiantes(estudiante_global);\n\n        document.getElementById(\"grupos\").addEventListener(\"change\", filtrarEstudiantes);\n\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nasync function consultarReportes(){\n    try {\n        const url = 'https://sjvacademia.com/api/reporte';\n        const resultado = await fetch(url);\n        reportes_global = await resultado.json();\n\n        mostrarReportes(reportes_global);\n\n        // document.getElementById(\"grupos\").addEventListener(\"change\", filtrarEstudiantes);\n\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n\n// FUNCIONES DE MUESTRA\n\n\nfunction mostrarGrupos(grupos){\n    grupos.forEach(grupo => {\n        const {nombre, id} = grupo\n\n        const nombreGrupo = document.createElement('OPTION');\n        nombreGrupo.textContent = nombre;\n        nombreGrupo.value = id;\n\n        document.querySelector('#grupos').appendChild(nombreGrupo)\n    })\n}\n\n\nfunction mostrarReportes(registros) {\n    const tabla = document.getElementById('filas'); // Seleccionar el tbody donde agregar las filas\n    tabla.innerHTML = \"\"; // Limpiar la tabla antes de agregar nuevos reportes\n\n    // Ordenar registros por fecha (descendente)\n    registros.sort((a, b) => new Date(b.fechahora) - new Date(a.fechahora));\n\n    registros.forEach(registro => {\n        const { estudiante, reporte, comentario, responsable, nombre_asignatura, fechahora, nombre_grupo, codigoid } = registro;\n\n        // Crear una nueva fila para el reporte\n        const fila = document.createElement('tr');\n\n        // Crear celdas para cada dato\n        const r_estudiante = document.createElement('td');\n        r_estudiante.textContent = estudiante;\n\n        const r_reporte = document.createElement('td');\n        r_reporte.textContent = reporte;\n\n        const r_comentario = document.createElement('td');\n        r_comentario.textContent = comentario;\n\n        const r_responsable = document.createElement('td');\n        r_responsable.textContent = responsable;\n\n        const r_asignatura = document.createElement('td');\n        r_asignatura.textContent = nombre_asignatura;\n\n\n        const r_fecha = document.createElement('td');\n        r_fecha.textContent = fechahora; // Mantener el formato original\n\n        const r_grupo = document.createElement('td');\n        r_grupo.textContent = nombre_grupo;\n\n\n        const r_codigo = document.createElement('td');\n        r_codigo.textContent = codigoid;\n\n        // Crear celda para acciones (ejemplo de un botón)\n        const r_acciones = document.createElement('td');\n        const botonEliminar = document.createElement('button');\n        botonEliminar.textContent = \"Eliminar\";\n        botonEliminar.classList.add(\"btn-eliminar\");\n        botonEliminar.onclick = () => eliminarReporte(registro.id);\n        r_acciones.appendChild(botonEliminar);\n\n        // Agregar todas las celdas a la fila\n        fila.appendChild(r_estudiante);\n        fila.appendChild(r_reporte);\n        fila.appendChild(r_comentario);\n        fila.appendChild(r_responsable);\n        fila.appendChild(r_asignatura);\n        fila.appendChild(r_fecha);\n        fila.appendChild(r_grupo);\n        fila.appendChild(r_acciones);\n\n        // Agregar la fila a la tabla\n        tabla.appendChild(fila);\n    });\n}\n\n\n\n\nfunction mostrarEstudiantes(estudiantes) {\n    estudiantes.forEach(estudiante => {\n        const { codigo, documento, fechaNacimiento, grupoid, nombre, estado, fecha} = estudiante;\n\n        const nombreEstudiante = document.createElement('H4');\n        nombreEstudiante.classList.add('nombre-estudiante');\n        nombreEstudiante.textContent = nombre;\n\n        const estadoEstudiante = document.createElement('P');\n        estadoEstudiante.classList.add('estado-estudiante');\n        estadoEstudiante.textContent =  estado ? estado : '';\n        // Validar si hay estado y la fecha coincide con la actual\n        if (estado && fecha === hoy) {\n            estadoEstudiante.textContent = estado;\n            estadoEstudiante.classList.remove('oculto'); \n        } else {\n            estadoEstudiante.textContent = ''; \n            estadoEstudiante.classList.add('oculto');\n        }\n\n        // Crear los botones con stopPropagation()\n        const botonFalta = document.createElement('BUTTON');\n        botonFalta.classList.add('boton');\n        botonFalta.textContent = 'Falta';\n        botonFalta.onclick = function (event) {\n            event.stopPropagation(); // Evita que el clic en el botón active la selección de la ficha\n            registrarNovedad(estudiante, 'falta');\n        };\n\n        const botonTarde = document.createElement('BUTTON');\n        botonTarde.classList.add('boton');\n        botonTarde.textContent = 'Tarde';\n        botonTarde.onclick = function (event) {\n            event.stopPropagation();\n            registrarNovedad(estudiante, 'tarde');\n        };\n\n        const botonExcusa = document.createElement('BUTTON');\n        botonExcusa.classList.add('boton');\n        botonExcusa.textContent = 'Excusa';\n        botonExcusa.onclick = function (event) {\n            event.stopPropagation();\n            registrarNovedad(estudiante, 'excusa');\n        };\n\n        const ficha = document.createElement('DIV');\n        ficha.classList.add('ficha');\n        ficha.dataset.idFicha = codigo;\n\n        ficha.onclick = function () {\n            removerSeleccion();\n            ficha.classList.add('seleccionado');\n            verEstudiante(nombre, codigo, documento, fechaNacimiento, grupoid);\n        };\n\n        const acciones = document.createElement('DIV');\n        acciones.classList.add('acciones');\n\n        acciones.appendChild(botonFalta);\n        acciones.appendChild(botonTarde);\n        acciones.appendChild(botonExcusa);\n\n        const info = document.createElement('DIV');\n        info.classList.add('info');\n\n        info.appendChild(nombreEstudiante)\n        info.appendChild(estadoEstudiante)\n\n\n        ficha.appendChild(info);\n\n        ficha.appendChild(acciones);\n\n        document.querySelector('#fichas').appendChild(ficha);\n    });\n}\n\nfunction mostrarNotificacion(mensaje) {\n    const contenedor = document.getElementById(\"notificacion-container\");\n\n    // Crear la notificación\n    const notificacion = document.createElement(\"div\");\n    notificacion.classList.add(\"notificacion\");\n\n    // Agregar contenido con ícono y texto\n    notificacion.innerHTML = `<i>✅</i> ${mensaje}`;\n\n    // Agregar la notificación al contenedor\n    contenedor.appendChild(notificacion);\n\n    // Eliminar la notificación después de 4 segundos\n    setTimeout(() => {\n        notificacion.remove();\n    }, 4000);\n}\n\n\n\n\n// ----------------------- FILTROS --------------------\n\n\n\nfunction filtrarEstudiantes() {\n    const grupoSeleccionado = document.getElementById(\"grupos\").value; // Obtener el grupo seleccionado\n\n    console.log(grupoSeleccionado)\n    // Filtrar estudiantes solo si se selecciona un grupo\n    let estudiantesFiltrados = grupoSeleccionado\n        ? estudiante_global.filter(est => est.grupoid === grupoSeleccionado)\n        : estudiante_global; // Si no hay selección, mostrar todos\n\n    // Limpiar el contenedor antes de agregar los nuevos resultados\n    document.querySelector(\"#fichas\").innerHTML = \"\";\n\n    // Mostrar los estudiantes filtrados\n    mostrarEstudiantes(estudiantesFiltrados);\n}\n\n\n\n\nfunction filtrarReportesPorEstudiante(codigoEstudiante) {\n    console.log(\"Código seleccionado:\", codigoEstudiante);\n    console.log(\"Lista de reportes:\", reportes_global);\n\n    let reportesFiltrados = reportes_global.filter(reporte => String(reporte.codigoid) === String(codigoEstudiante));\n\n    console.log(\"Reportes filtrados:\", reportesFiltrados); // Esto nos dirá si hay coincidencias\n\n    mostrarReportes(reportesFiltrados);\n}\n\nfunction filtrarTabla(columna) {\n    // Obtener el valor del input\n    const input = document.querySelectorAll(\"thead input\")[columna];\n    const filtro = input.value.toUpperCase();\n    const tabla = document.getElementById(\"miTabla\");\n    const filas = tabla.getElementsByTagName(\"tr\");\n    \n    // Iterar sobre las filas del cuerpo de la tabla\n    for (let i = 1; i < filas.length; i++) {\n      const celda = filas[i].getElementsByTagName(\"td\")[columna];\n      if (celda) {\n        const textoCelda = celda.textContent || celda.innerText;\n        filas[i].style.display = textoCelda.toUpperCase().indexOf(filtro) > -1 ? \"\" : \"none\";\n      }\n    }\n  }\n\n\n\n// ------------------------ FUNCIONALIDADES ------------------\n\n\nfunction removerSeleccion() {\n    const fichas = document.querySelectorAll('.ficha.seleccionado');\n    fichas.forEach(ficha => ficha.classList.remove('seleccionado'));\n}\n\n\nfunction verEstudiante(nombre, codigo, documento, fechaNacimiento, grupoid){\n    \n    let info_nombre = document.getElementById('info_nombre');\n    let info_codigo = document.getElementById('info_codigo');\n    let info_documento = document.getElementById('info_documento');\n    let info_fechaNacimiento = document.getElementById('info_fechaNacimiento');\n    let info_grado = document.getElementById('info_grado');\n\n\n    info_nombre.innerHTML = `<strong>Nombre: </strong>${nombre}`;\n    info_codigo.innerHTML = `<strong>Código: </strong>${codigo}`;\n    info_documento.innerHTML = `<strong>Documento: </strong>${documento}`;\n    info_fechaNacimiento.innerHTML = `<strong>Fecha de Nacimiento: </strong>${fechaNacimiento}`;\n    info_grado.innerHTML = `<strong>Grado: </strong>${grupoid}`;\n\n\n    // ACTUALIZAR estudiante_sel con el código del estudiante seleccionado\n    estudiante_sel.codigo = codigo;\n\n    // console.log(\"Código del estudiante seleccionado:\", codigo);\n    // console.log(\"Valor actualizado en estudiante_sel:\", estudiante_sel.codigo);\n    // Filtrar la tabla de reportes según el estudiante seleccionado\n    filtrarReportesPorEstudiante(codigo);\n}\n\n\n// Calendario\n\nfunction iniciarCalendario() {\n    var calendarEl = document.getElementById('calendar');\n    var calendar = new FullCalendar.Calendar(calendarEl, {\n        initialView: 'dayGridMonth',\n        locale: 'es',\n        events: '/api/reservas'\n    });\n\n    calendar.render();\n}\n\n// Función para abrir el modal\nfunction abrirModalReserva() {\n    document.getElementById(\"modalReserva\").style.display = \"block\";\n}\n\n// Función para cerrar el modal\nfunction cerrarModalReserva() {\n    document.getElementById(\"modalReserva\").style.display = \"none\";\n}\n\n\n\n\n\n\n// REGISTROS\n\nasync function registrarNovedad(estudiante, reporte){\n\n    const {codigo, nombre, grupoid} = estudiante\n\n    const grupoSeleccionado = document.getElementById(\"grupos\").value;\n    const asignaturaSeleccionada = document.getElementById(\"asignatura\").value;\n\n    // Verificar si se seleccionó un grupo y una asignatura\n    if (!grupoSeleccionado || !asignaturaSeleccionada) {\n        mostrarNotificacion(\"⚠️ Debes seleccionar un grupo y una asignatura antes de registrar.\");\n        return;\n    }\n\n    const datos = new FormData();\n    datos.append('estudiante', nombre)\n    datos.append('codigoid', codigo)\n    datos.append('reporte', reporte)\n    datos.append('grupo', grupoid)\n    datos.append(\"grupo\", grupoSeleccionado);\n    datos.append(\"asignaturaid\", asignaturaSeleccionada);\n\n    // Peticion hacia la API\n    const url = 'https://sjvacademia.com/api/asistencia'\n\n    const respuesta = await fetch(url, {\n        method: 'POST',\n        body: datos\n    })\n\n    const resultado = await respuesta.json();\n    // console.log(resultado);\n\n    // Volver a cargar los reportes desde la API\n    await consultarReportes();\n\n    // Filtrar nuevamente la tabla según el estudiante seleccionado\n    filtrarReportesPorEstudiante(estudiante.codigo);\n\n    mostrarNotificacion(\"Registro Exitoso ✅\");\n\n    // console.log(\"Novedad registrada y tabla actualizada\");\n}\n\nasync function eliminarReporte(id) {\n    if (!confirm(\"¿Estás seguro de que deseas eliminar este reporte?\")) {\n        return;\n    }\n\n    try {\n        const url = \"https://sjvacademia.com/api/eliminar-asistencia\"; // Asegúrate de que la ruta sea correcta\n\n        const formData = new FormData();\n        formData.append(\"id\", id);\n\n        const respuesta = await fetch(url, {\n            method: \"POST\",\n            body: formData\n        });\n\n        if (!respuesta.ok) {\n            throw new Error(\"Error al eliminar el reporte\");\n        }\n\n        const resultado = await respuesta.json();\n        console.log(\"Reporte eliminado:\", resultado);\n\n        // Volver a cargar los reportes desde la API\n        await consultarReportes();\n\n        // console.log(\"Código actual en estudiante_sel:\", estudiante_sel.codigo);\n\n        // Verificar si estudiante_sel.codigo tiene un valor válido antes de filtrar\n        if (estudiante_sel.codigo) {\n            filtrarReportesPorEstudiante(estudiante_sel.codigo);\n        } else {\n            console.warn(\"No hay estudiante seleccionado para filtrar reportes.\");\n        }\n\n        // Mostrar notificación\n        mostrarNotificacion(\"Reporte eliminado con éxito ❌\");\n\n    } catch (error) {\n        console.error(\"Error al eliminar reporte:\", error);\n        mostrarNotificacion(\"Error al eliminar el reporte ❌\");\n    }\n}\n\n\n// Reporte grupo completo\n\n// Función para verificar el estado del grupo seleccionado\nfunction verificarEstadoGrupo() {\n    const grupoId = document.getElementById(\"grupos\").value;\n    const botonGrupoCompleto = document.getElementById(\"grupo-completo\");\n\n    // Buscar si el grupo tiene el estado \"completo\" para la fecha actual\n    const grupo = estadoGrupos.find(\n        (g) => g.idgrupo == grupoId && g.completo === \"completo\" && g.fecha === hoy\n    );\n\n    // Deshabilitar o habilitar el botón según el estado del grupo\n    if (grupo) {\n        botonGrupoCompleto.disabled = true;\n        botonGrupoCompleto.classList.add('deshabilitado')\n        alert(`El grupo está completo hoy 👍🏻`);\n    } else {\n        botonGrupoCompleto.disabled = false;\n    }\n}\n\n// Escucha el cambio en el selector de grupos\ndocument.getElementById(\"grupos\").addEventListener(\"change\", verificarEstadoGrupo);\n\n// Función para marcar un grupo como completo\ndocument.getElementById(\"grupo-completo\").addEventListener(\"click\", async function () {\n    const grupoId = document.getElementById(\"grupos\").value;\n    const fechaActual = new Date().toISOString().split(\"T\")[0]; // Fecha en formato YYYY-MM-DD\n\n    if (!grupoId) {\n        alert(\"Seleccione un grupo\");\n        return;\n    }\n\n    const formData = new FormData();\n    formData.append(\"grupo\", grupoId);\n    formData.append(\"completo\", \"completo\");\n    formData.append(\"fecha\", fechaActual);\n\n    try {\n        const respuesta = await fetch(\"https://sjvacademia.com/api/grupo-completo\", {\n            method: \"POST\",\n            body: formData,\n        });\n\n        const resultado = await respuesta.json();\n\n        if (resultado.exito) {\n            alert(\"Grupo marcado como completo 👍🏻\");\n            document.getElementById(\"grupo-completo\").disabled = true; // Desactivar el botón\n            await cargarEstadoGrupos(); // Recargar el estado de los grupos\n        } else {\n            alert(\"Error al actualizar el grupo\");\n        }\n    } catch (error) {\n        console.error(\"Error al marcar grupo completo:\", error);\n    }\n});"]}