{"version":3,"sources":["reservas.js"],"names":["url_real","document","getElementById","dataset","url","loadCarros","sedeSeleccionada","value","carroSelect","innerHTML","fetch","then","response","json","data","console","log","Array","isArray","length","forEach","carro","div","createElement","className","textContent","nombre","totalpc","carroId","id","capacidad","onclick","selectCarro","appendChild","error","catch","iniciarCalendario","calendarEl","FullCalendar","Calendar","initialView","nowIndicator","locale","headerToolbar","left","center","right","slotMinTime","slotMaxTime","businessHours","daysOfWeek","startTime","endTime","weekends","allDaySlot","render","abrirModalReserva","style","display","cerrarModalReserva","carroElement","querySelectorAll","item","classList","remove","add","disabled","loadCalendar","fechaSeleccionada","window","calendarInstance","destroy","events","initialDate","Date","toISOString","split","eventClick","info","event","abrirModalDetalleReserva","extendedProps","grupo","responsable","fecha","horaInicio","start","toLocaleTimeString","hour","minute","horaFin","end","cantidadComputadores","nombre_carro","eventColor","gotoDate","selectedCarro","querySelector","alert","limpiarFormularioReserva","reset","reserva","innerText","cerrarModalDetalleReserva","verificarDisponibilidad","disponibilidadMensaje","boton","warn","disponibles","computadoresDisponibles","max","reservarBtn","mostrarNotificacion","mensaje","contenedor","notificacion","setTimeout","opacity","transform","async","cargarMisReservas","respuesta","reservas","tabla","fila","eliminarReserva","confirm","formData","FormData","append","method","body","resultado","addEventListener","fechaReserva","today","setDate","getDate","minDate","setAttribute","inicio","hora","minutos","map","Number","nuevaHora","nuevaHoraFin","toString","padStart","preventDefault","headers","Content-Type","JSON","stringify","result","status","message"],"mappings":"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","file":"reservas.min.js","sourcesContent":["const url_real = document.getElementById('urlreal').dataset.url;\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    cargarMisReservas();\n    \n    if (document.getElementById(\"calendar\")) {\n        iniciarCalendario();\n    }\n\n    if (document.getElementById(\"sede\")) {\n        document.getElementById(\"sede\").addEventListener(\"change\", loadCarros);\n    }\n\n\n    // Asegurar que los elementos existen antes de asignar eventos\n    const fechaReserva = document.getElementById(\"fechaReserva\");\n    const horaInicio = document.getElementById(\"horaInicio\");\n    const horaFin = document.getElementById(\"horaFin\");\n    \n\n    if (fechaReserva) {\n        // Obtener la fecha de mañana en formato YYYY-MM-DD\n        const today = new Date();\n        today.setDate(today.getDate() + 1); // Sumamos 1 día para evitar hoy\n        const minDate = today.toISOString().split(\"T\")[0];\n\n        // Establecer el valor mínimo en el input\n        fechaReserva.setAttribute(\"min\", minDate);\n    }\n\n\n    if (horaInicio && horaFin) {\n\n        horaInicio.setAttribute(\"min\", \"07:30\");\n        horaInicio.setAttribute(\"max\", \"15:00\");\n        horaFin.setAttribute(\"min\", \"08:00\");\n        horaFin.setAttribute(\"max\", \"16:00\");\n\n        // Evento al cambiar la hora de inicio\n        horaInicio.addEventListener(\"change\", function () {\n            const inicio = horaInicio.value;\n            if (!inicio) return;\n\n            // Convertir a objeto Date para manipular la hora\n            let [hora, minutos] = inicio.split(\":\").map(Number);\n\n            if (hora < 7 || (hora === 7 && minutos < 30)) {\n                mostrarNotificacion(\"⚠️ La hora mínima de reserva es 7:30 AM\");\n                horaInicio.value = \"07:30\";\n                hora = 7;\n                minutos = 30;\n            }\n\n            let nuevaHora = hora + 1; // Sumar 1 hora\n           \n            // Ajustar si sobrepasa las 23:59\n            if (nuevaHora > 16) nuevaHora = 16;\n\n            // Formatear a HH:MM\n            const nuevaHoraFin = nuevaHora.toString().padStart(2, \"0\") + \":\" + minutos.toString().padStart(2, \"0\");\n\n            // Asignar la nueva hora fin automáticamente\n            horaFin.value = nuevaHoraFin;\n            horaFin.setAttribute(\"min\", nuevaHoraFin);\n        });\n\n        // Validar que la hora de fin no sea menor a la de inicio\n        \n        \n        horaFin.addEventListener(\"change\", function () {\n            if (horaInicio.value && horaFin.value) {\n                if (horaFin.value <= horaInicio.value) {\n                    mostrarNotificacion(\"⚠️ La hora de fin debe ser posterior a la hora de inicio.\");\n                    horaFin.value = \"\"; // Limpiar el campo si la hora es inválida\n                }\n\n                if (horaFin.value > \"16:00\") {\n                    mostrarNotificacion(\"⚠️ La hora máxima de reserva es hasta las 4:00 PM.\");\n                    horaFin.value = \"16:00\"; // Ajustar la hora fin al máximo permitido\n                }\n            }\n        });\n    }\n\n    if (fechaReserva && horaInicio && horaFin) {\n        fechaReserva.addEventListener(\"change\", verificarDisponibilidad);\n        horaInicio.addEventListener(\"change\", verificarDisponibilidad);\n        horaFin.addEventListener(\"change\", verificarDisponibilidad);\n        console.log(\"Eventos de disponibilidad registrados correctamente\");\n    } else {\n        console.error(\"Uno o más elementos de fecha y hora no se encontraron en el DOM.\");\n    }\n});\n\n\nfunction loadCarros() {\n    const sedeSeleccionada = document.getElementById(\"sede\").value;\n    const carroSelect = document.getElementById(\"carroSelect\");\n\n    carroSelect.innerHTML = \"\"; // Limpiar antes de agregar nuevos datos\n\n    if (!sedeSeleccionada) return;\n\n    fetch(`${url_real}/api/carros?sede=${sedeSeleccionada}`)  // Cambiar a `/reservas/carros?sede=Medellín` si usas ReservaController\n        .then(response => response.json())\n        .then(data => {\n            console.log(\"Datos recibidos de la API:\", data);\n            if (!Array.isArray(data)) {\n                console.error(\"Error: La API no devolvió un array:\", data);\n                return;\n            }\n            if (data.length === 0) {\n                carroSelect.innerHTML = \"<p>No hay carros disponibles en esta sede.</p>\";\n                return;\n            }\n\n            data.forEach(carro => {\n                const div = document.createElement(\"div\");\n                div.className = \"carro-item\";\n                div.textContent = `${carro.nombre} (${carro.totalpc} Computadores)`;\n                div.dataset.carroId = carro.id;\n                div.dataset.capacidad = carro.totalpc;\n                div.onclick = () => selectCarro(div);\n\n                carroSelect.appendChild(div);\n            });\n        })\n        .catch(error => console.error(\"Error al cargar carros:\", error));\n}\n\n\n\n\n// Iniciar el calendario con FullCalendar\nfunction iniciarCalendario() {\n    var calendarEl = document.getElementById('calendar');\n    const calendar = new FullCalendar.Calendar(calendarEl, {\n        initialView: 'timeGridWeek',\n        nowIndicator: true,\n        locale: 'es',\n        headerToolbar: {\n            left: 'prev,next today',\n            center: 'title',\n            right: 'timeGridWeek,timeGridDay'\n        },\n        slotMinTime: '07:30:00',\n        slotMaxTime: '17:00:00',\n        businessHours: {\n            daysOfWeek: [1, 2, 3, 4, 5], // Lunes a Viernes\n            startTime: '07:00',\n            endTime: '17:00',\n        },\n        weekends: false,\n        allDaySlot: false,\n    });\n\n    calendar.render();\n}\n\n// Función para abrir el modal de reserva\nfunction abrirModalReserva() {\n    document.getElementById(\"modalReserva\").style.display = \"block\";\n}\n\n// Función para cerrar el modal de reserva\nfunction cerrarModalReserva() {\n    document.getElementById(\"modalReserva\").style.display = \"none\";\n}\n\n\nfunction selectCarro(carroElement) {\n    // Deseleccionar cualquier carro previamente seleccionado\n    document.querySelectorAll('.carro-item').forEach(item => item.classList.remove('selected'));\n\n    // Seleccionar el carro actual\n    carroElement.classList.add('selected');\n\n    // Guardar el ID del carro seleccionado\n    const carroId = carroElement.dataset.carroId;\n\n    // Habilitar el botón de reservar\n    document.getElementById('abrirModalReservaBtn').disabled = false;\n\n    // Cargar el calendario con las reservas de este carro\n    loadCalendar(carroId);\n}\n\n\nfunction loadCalendar(carroId, fechaSeleccionada = null) {\n    fetch(`${url_real}/api/reservas?carro_id=${carroId}`)\n        .then(response => response.json())\n        .then(data => {\n            console.log(\"Reservas recibidas para el calendario:\", data);\n\n            if (!Array.isArray(data)) {\n                console.error(\"Error: La API no devolvió un array:\", data);\n                return;\n            }\n\n            const calendarEl = document.getElementById('calendar');\n\n            if (window.calendarInstance) {\n                window.calendarInstance.destroy();\n            }\n\n            window.calendarInstance = new FullCalendar.Calendar(calendarEl, {\n                initialView: 'timeGridWeek',\n                nowIndicator: true,\n                locale: 'es',\n                headerToolbar: {\n                    left: 'prev,next today',\n                    center: 'title',\n                    right: 'timeGridWeek,timeGridDay'\n                },\n                slotMinTime: '07:30:00',  // ✅ Ahora la hora mínima es 7:30 AM\n                slotMaxTime: '17:00:00',\n                businessHours: {\n                    daysOfWeek: [1, 2, 3, 4, 5], // Lunes a Viernes\n                    startTime: '07:30',  // ✅ Ajustado a 7:30 AM\n                    endTime: '17:00',\n                },\n                weekends: false,\n                allDaySlot: false,\n                events: data,\n\n                // 📌 Solo cambiar la fecha si se ha seleccionado una nueva, de lo contrario usa la actual\n                initialDate: fechaSeleccionada || new Date().toISOString().split(\"T\")[0], \n\n                eventClick: function(info) {\n                    const event = info.event;\n                    abrirModalDetalleReserva({\n                        carro: event.extendedProps.carro,\n                        grupo: event.extendedProps.grupo,\n                        responsable: event.extendedProps.responsable,\n                        fecha: event.extendedProps.fecha,\n                        horaInicio: event.start.toLocaleTimeString('es-CO', { hour: '2-digit', minute: '2-digit' }),\n                        horaFin: event.end.toLocaleTimeString('es-CO', { hour: '2-digit', minute: '2-digit' }),\n                        cantidadComputadores: event.extendedProps.cantidadComputadores,\n                        nombre_carro: event.extendedProps.nombre_carro\n                    });\n                },\n\n                eventColor: '#ffa81d'\n            });\n\n            window.calendarInstance.render();\n            \n            // 📌 Si hay una fecha seleccionada, mover el calendario a esa fecha\n            if (fechaSeleccionada) {\n                window.calendarInstance.gotoDate(fechaSeleccionada);\n            }\n        })\n        .catch(error => console.error(\"Error al cargar reservas en el calendario:\", error));\n}\n\n\n\n\n\n\n\nfunction abrirModalReserva() {\n    const selectedCarro = document.querySelector('.carro-item.selected');\n    if (!selectedCarro) {\n        alert('Debes seleccionar un carro antes de reservar.');\n        return;\n    }\n\n    // Guardar el carro en el formulario de reserva\n    document.getElementById('formReserva').dataset.carroId = selectedCarro.dataset.carroId;\n\n    document.getElementById(\"modalReserva\").style.display = \"block\";\n}\n\n\nfunction limpiarFormularioReserva() {\n    document.getElementById('formReserva').reset();\n\n    // Restablecer los valores específicos manualmente si es necesario\n    document.getElementById('fechaReserva').value = \"\";\n    document.getElementById('horaInicio').value = \"\";\n    document.getElementById('horaFin').value = \"\";\n    document.getElementById('cantidadComputadores').value = \"\";\n    document.getElementById('grupo').value = \"\";\n    document.getElementById('disponibilidad').textContent = \"\"; // Limpiar mensaje de disponibilidad\n\n    console.log(\"Formulario de reserva reiniciado.\");\n}\n\n\nfunction abrirModalDetalleReserva(reserva) {\n    console.log(\"Reserva seleccionada:\", reserva); // 🛠️ Depuración\n    document.getElementById('detalleCarro').innerText = reserva.nombre_carro;\n    document.getElementById('detalleGrupo').innerText = reserva.grupo;\n    document.getElementById('detalleResponsable').innerText = reserva.responsable;\n    document.getElementById('detalleHoraInicio').innerText = reserva.horaInicio;\n    document.getElementById('detalleHoraFin').innerText = reserva.horaFin;\n    document.getElementById('detalleCantidadComputadores').innerText = reserva.cantidadComputadores;\n    document.getElementById('modalDetalleReserva').style.display = 'block';\n}\n\nfunction cerrarModalDetalleReserva() {\n    document.getElementById('modalDetalleReserva').style.display = 'none';\n}\n\n\nfunction verificarDisponibilidad() {\n    const carroElement = document.querySelector('.carro-item.selected');\n    const carroId = carroElement ? carroElement.dataset.carroId : null;\n    const fecha = document.getElementById('fechaReserva').value;\n    const horaInicio = document.getElementById('horaInicio').value;\n    const horaFin = document.getElementById('horaFin').value;\n    const disponibilidadMensaje = document.getElementById('disponibilidad');\n    const boton = document.getElementById('btn-reservam')\n\n    console.log(\"Ejecutando verificarDisponibilidad\");\n    console.log(\"Carro ID:\", carroId);\n    console.log(\"Fecha:\", fecha);\n    console.log(\"Hora Inicio:\", horaInicio);\n    console.log(\"Hora Fin:\", horaFin);\n\n    if (!carroId || !fecha || !horaInicio || !horaFin) {\n        console.warn(\"Algunos valores son nulos o no han sido seleccionados.\");\n        boton.disabled = true;\n        disponibilidadMensaje.textContent = \"Seleccione una fecha y hora válida.\";\n        return;\n    }\n\n    fetch(`${url_real}/api/disponibilidad?carro_id=${carroId}&fecha=${fecha}&horaInicio=${horaInicio}&horaFin=${horaFin}`)\n        .then(response => response.json())\n        .then(data => {\n            console.log(\"Respuesta de API:\", data);\n\n            if (data.error) {\n                disponibilidadMensaje.textContent = data.error;\n                return;\n            }\n\n            const disponibles = data.computadoresDisponibles;\n            console.log(disponibles)\n            if (disponibles > 0) {\n                disponibilidadMensaje.textContent = `Computadores disponibles: ${disponibles}`;\n                document.getElementById('cantidadComputadores').max = disponibles;\n                boton.disabled = false;\n            } else {\n                disponibilidadMensaje.textContent = \"Este carrito no está disponible en este horario\";\n                boton.disabled = true;\n            }\n        })\n        .catch(error => {\n            console.error(\"Error al verificar disponibilidad:\", error);\n            reservarBtn.disabled = true;\n        });\n}\n\n\n\n// NOTIFICACION\n\nfunction mostrarNotificacion(mensaje) {\n    const contenedor = document.getElementById(\"notificacion-container\");\n\n    // Crear la notificación\n    const notificacion = document.createElement(\"div\");\n    notificacion.classList.add(\"notificacion\");\n\n    // Agregar contenido con ícono y texto\n    notificacion.innerHTML = `<i>✅</i> ${mensaje}`;\n\n\n    // Agregar la notificación al contenedor\n    contenedor.appendChild(notificacion);\n\n    // Mostrar con animación\n    setTimeout(() => {\n        notificacion.style.opacity = \"1\";\n        notificacion.style.transform = \"translateY(0)\";\n    }, 100);\n\n    // Eliminar la notificación después de 4 segundos con animación\n    setTimeout(() => {\n        notificacion.style.opacity = \"0\";\n        notificacion.style.transform = \"translateY(-20px)\";\n        setTimeout(() => {\n            notificacion.remove();\n        }, 300);\n    }, 4000);\n}\n\n\n\n\n// ----------------- RESERVAR ----------------\n\n\ndocument.getElementById('formReserva').addEventListener('submit', function(event) {\n    event.preventDefault(); // Evita que recargue la página\n\n    const selectedCarro = document.querySelector('.carro-item.selected');\n    if (!selectedCarro) {\n        alert('Debes seleccionar un carro antes de reservar.');\n        return;\n    }\n\n    const fechaReserva = document.getElementById('fechaReserva').value; // Obtener la fecha seleccionada\n\n    const data = {\n        carro: selectedCarro.dataset.carroId,\n        fecha: fechaReserva,  // Guardar la fecha\n        horaInicio: document.getElementById('horaInicio').value,\n        horaFin: document.getElementById('horaFin').value,\n        cantidadComputadores: document.getElementById('cantidadComputadores').value,\n        grupo: document.getElementById('grupo').value\n    };\n\n    console.log(data);\n\n    fetch(`${url_real}/api/reservas/crear`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data)\n    })\n    .then(response => response.json())\n    .then(result => {\n        if (result.status === 'success') {\n            mostrarNotificacion(\"Reserva realizada con éxito ✅\");\n            limpiarFormularioReserva();\n            cerrarModalReserva();\n\n            // 📌 Ahora el calendario se actualizará y se moverá automáticamente a la fecha seleccionada\n            loadCalendar(selectedCarro.dataset.carroId, fechaReserva); \n\n        } else {\n            alert('Error al reservar: ' + result.message);\n            mostrarNotificacion(\"Error al realizar la reserva ❌\");\n        }\n    })\n    .catch(error => console.error(\"Error al realizar la reserva:\", error));\n});\n\n\nasync function cargarMisReservas() {\n    try {\n        const respuesta = await fetch(\"/api/mis-reservas\");\n        const reservas = await respuesta.json();\n\n        const tabla = document.getElementById(\"tabla-reservas\");\n        tabla.innerHTML = \"\"; // Limpiar tabla antes de agregar nuevas filas\n\n        if (reservas.error) {\n            tabla.innerHTML = `<tr><td colspan=\"7\">${reservas.error}</td></tr>`;\n            return;\n        }\n\n        reservas.forEach(reserva => {\n            const fila = document.createElement(\"tr\");\n\n            fila.innerHTML = `\n                <td>${reserva.nombre_carro}</td>\n                <td>${reserva.grupo}</td>\n                <td>${reserva.fecha}</td>\n                <td>${reserva.horaInicio}</td>\n                <td>${reserva.horaFin}</td>\n                <td>${reserva.cantidadComputadores}</td>\n                <td>\n                    <button class=\"btn-eliminar\" onclick=\"eliminarReserva(${reserva.id})\">Eliminar</button>\n                </td>\n            `;\n\n            tabla.appendChild(fila);\n        });\n    } catch (error) {\n        console.error(\"Error cargando reservas:\", error);\n    }\n}\n\nasync function eliminarReserva(id) {\n    if (!confirm(\"¿Estás seguro de eliminar esta reserva?\")) return;\n\n    try {\n        const formData = new FormData();\n        formData.append(\"id\", id);\n\n        const respuesta = await fetch(\"/api/eliminar-reserva\", {\n            method: \"POST\",\n            body: formData\n        });\n\n        const resultado = await respuesta.json();\n\n        if (resultado.resultado) {\n            alert(\"Reserva eliminada correctamente\");\n            cargarMisReservas(); // Recargar la tabla\n        } else {\n            alert(\"Error al eliminar la reserva\");\n        }\n    } catch (error) {\n        console.error(\"Error al eliminar reserva:\", error);\n    }\n}\n\n\n"]}