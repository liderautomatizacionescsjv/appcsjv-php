{"version":3,"sources":["script.js"],"names":["estudiante_sel","codigo","fecha","grupo","reporte","hoy","Date","toISOString","split","estudiante_global","grupos_global","reportes_global","estadoGrupos","menu","menuIcon","document","querySelector","menuDeslizante","menuCerrar","menuOverlay","addEventListener","classList","add","remove","async","cargarEstadoGrupos","respuesta","fetch","json","console","log","error","iniciarApp","consultarApi","consultarReportes","cargarAsignaciones","verificarEstadoGrupo","url","asignaciones","selectGrupos","getElementById","selectAsignaturas","innerHTML","forEach","asignacion","nombre_grupo","opcionGrupo","createElement","value","grupoid","textContent","appendChild","nombre_asignatura","opcionAsignatura","cursoid","resultado","mostrarEstudiantes","filtrarEstudiantes","mostrarReportes","mostrarGrupos","grupos","nombre","id","nombreGrupo","registros","tabla","sort","a","b","fechahora","registro","estudiante","comentario","responsable","codigoid","fila","r_estudiante","r_reporte","r_comentario","r_responsable","r_asignatura","r_fecha","r_grupo","r_acciones","botonEliminar","onclick","eliminarReporte","estudiantes","documento","fechaNacimiento","estado","nombreEstudiante","estadoEstudiante","botonFalta","event","stopPropagation","registrarNovedad","botonTarde","botonExcusa","ficha","dataset","idFicha","removerSeleccion","verEstudiante","acciones","info","mostrarNotificacion","mensaje","contenedor","notificacion","setTimeout","grupoSeleccionado","estudiantesFiltrados","filter","est","filtrarReportesPorEstudiante","codigoEstudiante","reportesFiltrados","String","filtrarTabla","columna","filtro","querySelectorAll","toUpperCase","filas","getElementsByTagName","i","length","celda","textoCelda","innerText","style","display","indexOf","info_nombre","info_codigo","info_documento","info_fechaNacimiento","info_grado","iniciarCalendario","calendarEl","FullCalendar","Calendar","initialView","locale","events","render","abrirModalReserva","cerrarModalReserva","asignaturaSeleccionada","datos","FormData","append","method","body","confirm","formData","ok","Error","warn","grupoId","botonGrupoCompleto","find","g","idgrupo","completo","disabled","alert","fechaActual","exito"],"mappings":"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","file":"script.min.js","sourcesContent":["// VARIABLES\n\nconst estudiante_sel = {\n    codigo: '',\n    fecha: '',\n    grupo: '',\n    reporte: ''\n}\n\nconst hoy = new Date().toISOString().split('T')[0];\n\nlet estudiante_global = []\nlet grupos_global = []\nlet reportes_global = []\nlet estadoGrupos = []; // Variable para almacenar el estado de los grupos\n\n\n// DOM\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    iniciarApp();\n    cargarEstadoGrupos(); // Cargaar el estado de los grupos al inicio\n    menu();\n    iniciarCalendario();\n\n    \n});\n\nfunction menu(){\n    const menuIcon = document.querySelector(\".menu-icon\");\n    const menuDeslizante = document.querySelector(\".menu-deslizante\");\n    const menuCerrar = document.querySelector(\".menu-cerrar\");\n    const menuOverlay = document.querySelector(\".menu-overlay\");\n\n    // Abrir el menú\n    menuIcon.addEventListener(\"click\", () => {\n        menuDeslizante.classList.add(\"menu-abierto\");\n        menuOverlay.classList.add(\"activo\");\n    });\n\n    // Cerrar el menú con el botón ✖\n    menuCerrar.addEventListener(\"click\", () => {\n        menuDeslizante.classList.remove(\"menu-abierto\");\n        menuOverlay.classList.remove(\"activo\");\n    });\n\n    // Cerrar el menú al hacer clic fuera de él\n    menuOverlay.addEventListener(\"click\", () => {\n        menuDeslizante.classList.remove(\"menu-abierto\");\n        menuOverlay.classList.remove(\"activo\");\n    });\n}\n\n\nasync function cargarEstadoGrupos() {\n    try {\n        const respuesta = await fetch(\"http://localhost:3002/api/estado-grupos\");\n        estadoGrupos = await respuesta.json(); // Guardar el estado de los grupos\n        console.log(\"Estado de los grupos:\", estadoGrupos);\n    } catch (error) {\n        console.error(\"Error al cargar el estado de los grupos:\", error);\n    }\n}\n\nfunction iniciarApp(){\n    // consultarGrupos();\n    consultarApi();\n    consultarReportes();\n    cargarAsignaciones();\n    verificarEstadoGrupo(); // Verificar el estado del grupo seleccionado\n\n}\n\n\n\n// CONSULTAS\n\n// async function consultarGrupos(){\n//     try {\n//         const url = 'http://localhost:3002/api/grupos';\n//         const resultado = await fetch(url);\n//         grupos_global = await resultado.json();\n\n//         mostrarGrupos(grupos_global);\n\n//     } catch (error) {\n//         console.log(error);\n//     }\n// }\n\nasync function cargarAsignaciones() {\n    try {\n        const url = 'http://localhost:3002/api/asignaciones';\n        const respuesta = await fetch(url);\n        const asignaciones = await respuesta.json();\n\n        // console.log(\"Asignaciones recibidas:\", asignaciones);\n\n        // Seleccionar los elementos del DOM\n        const selectGrupos = document.getElementById(\"grupos\");\n        const selectAsignaturas = document.getElementById(\"asignatura\");\n\n        if (!selectGrupos || !selectAsignaturas) {\n            console.error(\"Error: No se encontraron los elementos select en el DOM.\");\n            return;\n        }\n\n        // Limpiar los selectores antes de agregar opciones\n        selectGrupos.innerHTML = `<option value=\"\">--Seleccione--</option>`;\n        selectAsignaturas.innerHTML = `<option value=\"\">--Seleccione--</option>`;\n\n        // Llenar los selectores con los datos recibidos de la API\n        asignaciones.forEach(asignacion => {\n            if (asignacion.nombre_grupo) {\n                const opcionGrupo = document.createElement(\"option\");\n                opcionGrupo.value = asignacion.grupoid;\n                opcionGrupo.textContent = asignacion.nombre_grupo;\n                selectGrupos.appendChild(opcionGrupo);\n            }\n\n            if (asignacion.nombre_asignatura) {\n                const opcionAsignatura = document.createElement(\"option\");\n                opcionAsignatura.value = asignacion.cursoid;\n                opcionAsignatura.textContent = asignacion.nombre_asignatura;\n                selectAsignaturas.appendChild(opcionAsignatura);\n            }\n        });\n\n        // console.log(\"Opciones de grupos agregadas:\", selectGrupos.innerHTML);\n        // console.log(\"Opciones de asignaturas agregadas:\", selectAsignaturas.innerHTML);\n\n    } catch (error) {\n        console.error(\"Error al cargar asignaciones:\", error);\n    }\n}\n\n\n\n\n\n\nasync function consultarApi(){\n    try {\n        const url = 'http://localhost:3002/api/estudiantes';\n        const resultado = await fetch(url);\n        estudiante_global = await resultado.json();\n\n        mostrarEstudiantes(estudiante_global);\n\n        document.getElementById(\"grupos\").addEventListener(\"change\", filtrarEstudiantes);\n\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nasync function consultarReportes(){\n    try {\n        const url = 'http://localhost:3002/api/reporte';\n        const resultado = await fetch(url);\n        reportes_global = await resultado.json();\n\n        mostrarReportes(reportes_global);\n\n        // document.getElementById(\"grupos\").addEventListener(\"change\", filtrarEstudiantes);\n\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n\n// FUNCIONES DE MUESTRA\n\n\nfunction mostrarGrupos(grupos){\n    grupos.forEach(grupo => {\n        const {nombre, id} = grupo\n\n        const nombreGrupo = document.createElement('OPTION');\n        nombreGrupo.textContent = nombre;\n        nombreGrupo.value = id;\n\n        document.querySelector('#grupos').appendChild(nombreGrupo)\n    })\n}\n\n\nfunction mostrarReportes(registros) {\n    const tabla = document.getElementById('filas'); // Seleccionar el tbody donde agregar las filas\n    tabla.innerHTML = \"\"; // Limpiar la tabla antes de agregar nuevos reportes\n\n    // Ordenar registros por fecha (descendente)\n    registros.sort((a, b) => new Date(b.fechahora) - new Date(a.fechahora));\n\n    registros.forEach(registro => {\n        const { estudiante, reporte, comentario, responsable, nombre_asignatura, fechahora, nombre_grupo, codigoid } = registro;\n\n        // Crear una nueva fila para el reporte\n        const fila = document.createElement('tr');\n\n        // Crear celdas para cada dato\n        const r_estudiante = document.createElement('td');\n        r_estudiante.textContent = estudiante;\n\n        const r_reporte = document.createElement('td');\n        r_reporte.textContent = reporte;\n\n        const r_comentario = document.createElement('td');\n        r_comentario.textContent = comentario;\n\n        const r_responsable = document.createElement('td');\n        r_responsable.textContent = responsable;\n\n        const r_asignatura = document.createElement('td');\n        r_asignatura.textContent = nombre_asignatura;\n\n\n        const r_fecha = document.createElement('td');\n        r_fecha.textContent = fechahora; // Mantener el formato original\n\n        const r_grupo = document.createElement('td');\n        r_grupo.textContent = nombre_grupo;\n\n\n        const r_codigo = document.createElement('td');\n        r_codigo.textContent = codigoid;\n\n        // Crear celda para acciones (ejemplo de un botón)\n        const r_acciones = document.createElement('td');\n        const botonEliminar = document.createElement('button');\n        botonEliminar.textContent = \"Eliminar\";\n        botonEliminar.classList.add(\"btn-eliminar\");\n        botonEliminar.onclick = () => eliminarReporte(registro.id);\n        r_acciones.appendChild(botonEliminar);\n\n        // Agregar todas las celdas a la fila\n        fila.appendChild(r_estudiante);\n        fila.appendChild(r_reporte);\n        fila.appendChild(r_comentario);\n        fila.appendChild(r_responsable);\n        fila.appendChild(r_asignatura);\n        fila.appendChild(r_fecha);\n        fila.appendChild(r_grupo);\n        fila.appendChild(r_acciones);\n\n        // Agregar la fila a la tabla\n        tabla.appendChild(fila);\n    });\n}\n\n\n\n\nfunction mostrarEstudiantes(estudiantes) {\n    estudiantes.forEach(estudiante => {\n        const { codigo, documento, fechaNacimiento, grupoid, nombre, estado, fecha} = estudiante;\n\n        const nombreEstudiante = document.createElement('H4');\n        nombreEstudiante.classList.add('nombre-estudiante');\n        nombreEstudiante.textContent = nombre;\n\n        const estadoEstudiante = document.createElement('P');\n        estadoEstudiante.classList.add('estado-estudiante');\n        estadoEstudiante.textContent =  estado ? estado : '';\n        // Validar si hay estado y la fecha coincide con la actual\n        if (estado && fecha === hoy) {\n            estadoEstudiante.textContent = estado;\n            estadoEstudiante.classList.remove('oculto'); \n        } else {\n            estadoEstudiante.textContent = ''; \n            estadoEstudiante.classList.add('oculto');\n        }\n\n        // Crear los botones con stopPropagation()\n        const botonFalta = document.createElement('BUTTON');\n        botonFalta.classList.add('boton');\n        botonFalta.textContent = 'Falta';\n        botonFalta.onclick = function (event) {\n            event.stopPropagation(); // Evita que el clic en el botón active la selección de la ficha\n            registrarNovedad(estudiante, 'falta');\n        };\n\n        const botonTarde = document.createElement('BUTTON');\n        botonTarde.classList.add('boton');\n        botonTarde.textContent = 'Tarde';\n        botonTarde.onclick = function (event) {\n            event.stopPropagation();\n            registrarNovedad(estudiante, 'tarde');\n        };\n\n        const botonExcusa = document.createElement('BUTTON');\n        botonExcusa.classList.add('boton');\n        botonExcusa.textContent = 'Excusa';\n        botonExcusa.onclick = function (event) {\n            event.stopPropagation();\n            registrarNovedad(estudiante, 'excusa');\n        };\n\n        const ficha = document.createElement('DIV');\n        ficha.classList.add('ficha');\n        ficha.dataset.idFicha = codigo;\n\n        ficha.onclick = function () {\n            removerSeleccion();\n            ficha.classList.add('seleccionado');\n            verEstudiante(nombre, codigo, documento, fechaNacimiento, grupoid);\n        };\n\n        const acciones = document.createElement('DIV');\n        acciones.classList.add('acciones');\n\n        acciones.appendChild(botonFalta);\n        acciones.appendChild(botonTarde);\n        acciones.appendChild(botonExcusa);\n\n        const info = document.createElement('DIV');\n        info.classList.add('info');\n\n        info.appendChild(nombreEstudiante)\n        info.appendChild(estadoEstudiante)\n\n\n        ficha.appendChild(info);\n\n        ficha.appendChild(acciones);\n\n        document.querySelector('#fichas').appendChild(ficha);\n    });\n}\n\nfunction mostrarNotificacion(mensaje) {\n    const contenedor = document.getElementById(\"notificacion-container\");\n\n    // Crear la notificación\n    const notificacion = document.createElement(\"div\");\n    notificacion.classList.add(\"notificacion\");\n\n    // Agregar contenido con ícono y texto\n    notificacion.innerHTML = `<i>✅</i> ${mensaje}`;\n\n    // Agregar la notificación al contenedor\n    contenedor.appendChild(notificacion);\n\n    // Eliminar la notificación después de 4 segundos\n    setTimeout(() => {\n        notificacion.remove();\n    }, 4000);\n}\n\n\n\n\n// ----------------------- FILTROS --------------------\n\n\n\nfunction filtrarEstudiantes() {\n    const grupoSeleccionado = document.getElementById(\"grupos\").value; // Obtener el grupo seleccionado\n\n    console.log(grupoSeleccionado)\n    // Filtrar estudiantes solo si se selecciona un grupo\n    let estudiantesFiltrados = grupoSeleccionado\n        ? estudiante_global.filter(est => est.grupoid === grupoSeleccionado)\n        : estudiante_global; // Si no hay selección, mostrar todos\n\n    // Limpiar el contenedor antes de agregar los nuevos resultados\n    document.querySelector(\"#fichas\").innerHTML = \"\";\n\n    // Mostrar los estudiantes filtrados\n    mostrarEstudiantes(estudiantesFiltrados);\n}\n\n\n\n\nfunction filtrarReportesPorEstudiante(codigoEstudiante) {\n    console.log(\"Código seleccionado:\", codigoEstudiante);\n    console.log(\"Lista de reportes:\", reportes_global);\n\n    let reportesFiltrados = reportes_global.filter(reporte => String(reporte.codigoid) === String(codigoEstudiante));\n\n    console.log(\"Reportes filtrados:\", reportesFiltrados); // Esto nos dirá si hay coincidencias\n\n    mostrarReportes(reportesFiltrados);\n}\n\nfunction filtrarTabla(columna) {\n    // Obtener el valor del input\n    const input = document.querySelectorAll(\"thead input\")[columna];\n    const filtro = input.value.toUpperCase();\n    const tabla = document.getElementById(\"miTabla\");\n    const filas = tabla.getElementsByTagName(\"tr\");\n    \n    // Iterar sobre las filas del cuerpo de la tabla\n    for (let i = 1; i < filas.length; i++) {\n      const celda = filas[i].getElementsByTagName(\"td\")[columna];\n      if (celda) {\n        const textoCelda = celda.textContent || celda.innerText;\n        filas[i].style.display = textoCelda.toUpperCase().indexOf(filtro) > -1 ? \"\" : \"none\";\n      }\n    }\n  }\n\n\n\n// ------------------------ FUNCIONALIDADES ------------------\n\n\nfunction removerSeleccion() {\n    const fichas = document.querySelectorAll('.ficha.seleccionado');\n    fichas.forEach(ficha => ficha.classList.remove('seleccionado'));\n}\n\n\nfunction verEstudiante(nombre, codigo, documento, fechaNacimiento, grupoid){\n    \n    let info_nombre = document.getElementById('info_nombre');\n    let info_codigo = document.getElementById('info_codigo');\n    let info_documento = document.getElementById('info_documento');\n    let info_fechaNacimiento = document.getElementById('info_fechaNacimiento');\n    let info_grado = document.getElementById('info_grado');\n\n\n    info_nombre.innerHTML = `<strong>Nombre: </strong>${nombre}`;\n    info_codigo.innerHTML = `<strong>Código: </strong>${codigo}`;\n    info_documento.innerHTML = `<strong>Documento: </strong>${documento}`;\n    info_fechaNacimiento.innerHTML = `<strong>Fecha de Nacimiento: </strong>${fechaNacimiento}`;\n    info_grado.innerHTML = `<strong>Grado: </strong>${grupoid}`;\n\n\n    // ACTUALIZAR estudiante_sel con el código del estudiante seleccionado\n    estudiante_sel.codigo = codigo;\n\n    // console.log(\"Código del estudiante seleccionado:\", codigo);\n    // console.log(\"Valor actualizado en estudiante_sel:\", estudiante_sel.codigo);\n    // Filtrar la tabla de reportes según el estudiante seleccionado\n    filtrarReportesPorEstudiante(codigo);\n}\n\n\n// Calendario\n\nfunction iniciarCalendario() {\n    var calendarEl = document.getElementById('calendar');\n    var calendar = new FullCalendar.Calendar(calendarEl, {\n        initialView: 'dayGridMonth',\n        locale: 'es',\n        events: '/api/reservas'\n    });\n\n    calendar.render();\n}\n\n// Función para abrir el modal\nfunction abrirModalReserva() {\n    document.getElementById(\"modalReserva\").style.display = \"block\";\n}\n\n// Función para cerrar el modal\nfunction cerrarModalReserva() {\n    document.getElementById(\"modalReserva\").style.display = \"none\";\n}\n\n\n\n\n\n\n// REGISTROS\n\nasync function registrarNovedad(estudiante, reporte){\n\n    const {codigo, nombre, grupoid} = estudiante\n\n    const grupoSeleccionado = document.getElementById(\"grupos\").value;\n    const asignaturaSeleccionada = document.getElementById(\"asignatura\").value;\n\n    // Verificar si se seleccionó un grupo y una asignatura\n    if (!grupoSeleccionado || !asignaturaSeleccionada) {\n        mostrarNotificacion(\"⚠️ Debes seleccionar un grupo y una asignatura antes de registrar.\");\n        return;\n    }\n\n    const datos = new FormData();\n    datos.append('estudiante', nombre)\n    datos.append('codigoid', codigo)\n    datos.append('reporte', reporte)\n    datos.append('grupo', grupoid)\n    datos.append(\"grupo\", grupoSeleccionado);\n    datos.append(\"asignaturaid\", asignaturaSeleccionada);\n\n    // Peticion hacia la API\n    const url = 'http://localhost:3002/api/asistencia'\n\n    const respuesta = await fetch(url, {\n        method: 'POST',\n        body: datos\n    })\n\n    const resultado = await respuesta.json();\n    // console.log(resultado);\n\n    // Volver a cargar los reportes desde la API\n    await consultarReportes();\n\n    // Filtrar nuevamente la tabla según el estudiante seleccionado\n    filtrarReportesPorEstudiante(estudiante.codigo);\n\n    mostrarNotificacion(\"Registro Exitoso ✅\");\n\n    // console.log(\"Novedad registrada y tabla actualizada\");\n}\n\nasync function eliminarReporte(id) {\n    if (!confirm(\"¿Estás seguro de que deseas eliminar este reporte?\")) {\n        return;\n    }\n\n    try {\n        const url = \"http://localhost:3002/api/eliminar-asistencia\"; // Asegúrate de que la ruta sea correcta\n\n        const formData = new FormData();\n        formData.append(\"id\", id);\n\n        const respuesta = await fetch(url, {\n            method: \"POST\",\n            body: formData\n        });\n\n        if (!respuesta.ok) {\n            throw new Error(\"Error al eliminar el reporte\");\n        }\n\n        const resultado = await respuesta.json();\n        console.log(\"Reporte eliminado:\", resultado);\n\n        // Volver a cargar los reportes desde la API\n        await consultarReportes();\n\n        // console.log(\"Código actual en estudiante_sel:\", estudiante_sel.codigo);\n\n        // Verificar si estudiante_sel.codigo tiene un valor válido antes de filtrar\n        if (estudiante_sel.codigo) {\n            filtrarReportesPorEstudiante(estudiante_sel.codigo);\n        } else {\n            console.warn(\"No hay estudiante seleccionado para filtrar reportes.\");\n        }\n\n        // Mostrar notificación\n        mostrarNotificacion(\"Reporte eliminado con éxito ❌\");\n\n    } catch (error) {\n        console.error(\"Error al eliminar reporte:\", error);\n        mostrarNotificacion(\"Error al eliminar el reporte ❌\");\n    }\n}\n\n\n// Reporte grupo completo\n\n// Función para verificar el estado del grupo seleccionado\nfunction verificarEstadoGrupo() {\n    const grupoId = document.getElementById(\"grupos\").value;\n    const botonGrupoCompleto = document.getElementById(\"grupo-completo\");\n\n    // Buscar si el grupo tiene el estado \"completo\" para la fecha actual\n    const grupo = estadoGrupos.find(\n        (g) => g.idgrupo == grupoId && g.completo === \"completo\" && g.fecha === hoy\n    );\n\n    // Deshabilitar o habilitar el botón según el estado del grupo\n    if (grupo) {\n        botonGrupoCompleto.disabled = true;\n        botonGrupoCompleto.classList.add('deshabilitado')\n        alert(`El grupo está completo hoy 👍🏻`);\n    } else {\n        botonGrupoCompleto.disabled = false;\n    }\n}\n\n// Escucha el cambio en el selector de grupos\ndocument.getElementById(\"grupos\").addEventListener(\"change\", verificarEstadoGrupo);\n\n// Función para marcar un grupo como completo\ndocument.getElementById(\"grupo-completo\").addEventListener(\"click\", async function () {\n    const grupoId = document.getElementById(\"grupos\").value;\n    const fechaActual = new Date().toISOString().split(\"T\")[0]; // Fecha en formato YYYY-MM-DD\n\n    if (!grupoId) {\n        alert(\"Seleccione un grupo\");\n        return;\n    }\n\n    const formData = new FormData();\n    formData.append(\"grupo\", grupoId);\n    formData.append(\"completo\", \"completo\");\n    formData.append(\"fecha\", fechaActual);\n\n    try {\n        const respuesta = await fetch(\"http://localhost:3002/api/grupo-completo\", {\n            method: \"POST\",\n            body: formData,\n        });\n\n        const resultado = await respuesta.json();\n\n        if (resultado.exito) {\n            alert(\"Grupo marcado como completo 👍🏻\");\n            document.getElementById(\"grupo-completo\").disabled = true; // Desactivar el botón\n            await cargarEstadoGrupos(); // Recargar el estado de los grupos\n        } else {\n            alert(\"Error al actualizar el grupo\");\n        }\n    } catch (error) {\n        console.error(\"Error al marcar grupo completo:\", error);\n    }\n});"]}