{"version":3,"sources":["docentes.js"],"names":["estudiante_sel","codigo","fecha","grupo","reporte","hoy","Date","toISOString","split","estudiante_global","grupos_global","reportes_global","estadoGrupos","estudianteActual","tipoReporteActual","url_real","document","getElementById","dataset","url","async","cargarEstadoGrupos","respuesta","fetch","json","console","log","error","iniciarApp","usuarioid","id","agregarEventosUI","consultarApi","consultarReportes","cargarAsignaciones","verificarEstadoGrupo","buscador","addEventListener","filtrarEstudiantesPorBusqueda","modal","btnAbrir","btnCerrar","form","style","display","cargarOpciones","cerrarModalAsignacion","event","preventDefault","selectGrupo","selectAsignatura","grupoid","value","cursoid","nombreGrupo","options","selectedIndex","text","nombreAsignatura","method","headers","Content-Type","body","JSON","stringify","docenteid","nombre_grupo","nombre_asignatura","resultado","exito","mostrarNotificacion","respuestaGrupos","grupos","sort","a","b","nombre","localeCompare","innerHTML","forEach","idgrupo","respuestaAsignaturas","asignaturas","asignatura","idasignatura","asignaciones","selectGrupos","selectAsignaturas","gruposUnicos","Set","asignaturasUnicas","asignacion","has","add","opcionGrupo","createElement","textContent","appendChild","opcionAsignatura","mostrarEstudiantes","filtrarEstudiantes","mostrarReportes","mostrarGrupos","querySelector","registros","tabla","usuarioActual","fechahora","registro","estudiante","comentario","responsable","codigoid","fila","r_estudiante","r_reporte","selectReporte","actualizarReporte","r_comentario","textareaComentario","rows","r_responsable","r_asignatura","r_fecha","r_grupo","r_acciones","botonEliminar","classList","onclick","eliminarReporte","estudiantes","documento","fechaNacimiento","estado","email","nombreEstudiante","estadoEstudiante","crearBotonConLapiz","texto","clase","novedad","boton","stopPropagation","registrarNovedad","lapiz","remove","botonFalta","botonTarde","botonExcusa","ficha","idFicha","removerSeleccion","verEstudiante","acciones","info","mensaje","contenedor","notificacion","setTimeout","grupoSeleccionado","estudiantesFiltrados","filter","est","filtrarReportesPorEstudiante","codigoEstudiante","reportesFiltrados","String","filtrarTabla","columna","filtro","querySelectorAll","toUpperCase","filas","getElementsByTagName","i","length","celda","textoCelda","innerText","indexOf","textoBusqueda","toLowerCase","trim","nombreCompleto","includes","info_nombre","info_codigo","info_documento","info_fechaNacimiento","info_grado","info_correo","iniciarCalendario","calendarEl","FullCalendar","Calendar","initialView","locale","events","render","abrirModalReserva","cerrarModalReserva","usarModal","abrirModalComentario","enviarNovedad","nuevoReporte","nuevoComentario","datos","FormData","append","cerrarModalComentario","asignaturaSeleccionada","Object","fromEntries","confirm","formData","ok","Error","warn","grupoId","botonGrupoCompleto","find","g","completo","disabled","fechaActual","alert"],"mappings":"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","file":"docentes.min.js","sourcesContent":["// VARIABLES\n\nconst estudiante_sel = {\n    codigo: '',\n    fecha: '',\n    grupo: '',\n    reporte: ''\n}\n\nconst hoy = new Date().toISOString().split('T')[0];\n\nlet estudiante_global = []\nlet grupos_global = []\nlet reportes_global = []\nlet estadoGrupos = []; // Variable para almacenar el estado de los grupos\nlet estudianteActual = null;\nlet tipoReporteActual = \"\";\n\nconst url_real = document.getElementById('urlreal').dataset.url;\n\n\n// DOM\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    iniciarApp();\n    cargarEstadoGrupos(); \n    \n    \n    \n});\n\n\n\n\nasync function cargarEstadoGrupos() {\n    try {\n        const respuesta = await fetch(`${url_real}/api/estado-grupos`);\n        estadoGrupos = await respuesta.json(); // Guardar el estado de los grupos\n        console.log(\"Estado de los grupos:\", estadoGrupos);\n    } catch (error) {\n        console.error(\"Error al cargar el estado de los grupos:\", error);\n    }\n}\n\nfunction iniciarApp(){\n    // consultarGrupos();\n    const usuarioid = document.getElementById('usuario-id').dataset.id;\n    console.log(usuarioid);\n    agregarEventosUI();\n\n    consultarApi();\n    consultarReportes();\n    cargarAsignaciones();\n    verificarEstadoGrupo(); // Verificar el estado del grupo seleccionado\n\n}\n\n\n\n// CONSULTAS\nfunction agregarEventosUI() {\n    // Agregar evento al buscador\n    const buscador = document.getElementById(\"buscador\");\n    if (buscador) {\n        buscador.addEventListener(\"keyup\", filtrarEstudiantesPorBusqueda);\n    }\n\n    const modal = document.getElementById(\"modalAsignacion\");\n    const btnAbrir = document.getElementById(\"asignar-grupos\");\n    const btnCerrar = document.getElementById(\"cerrar\");\n    const form = document.getElementById(\"formAsignacion\");\n\n    if (btnAbrir) {\n        // Abrir el modal\n        btnAbrir.addEventListener(\"click\", function () {\n            modal.style.display = \"flex\";\n            cargarOpciones();\n        });\n    }\n\n    if (btnCerrar) {\n        // Cerrar el modal\n        btnCerrar.addEventListener(\"click\", function () {\n            cerrarModalAsignacion();\n        });\n    }\n\n    if (form) {\n        // Evento submit para guardar asignación\n        form.addEventListener(\"submit\", async function (event) {\n            event.preventDefault(); // Evitar recarga\n\n            const selectGrupo = document.getElementById(\"selectGrupo\");\n            const selectAsignatura = document.getElementById(\"selectAsignatura\");\n\n            const grupoid = selectGrupo.value;\n            const cursoid = selectAsignatura.value;\n            const usuarioid = document.getElementById(\"usuario-id\").dataset.id;\n\n            const nombreGrupo = selectGrupo.options[selectGrupo.selectedIndex].text;\n            const nombreAsignatura = selectAsignatura.options[selectAsignatura.selectedIndex].text;\n\n            if (!grupoid || !cursoid) {\n                mostrarNotificacion(\"⚠️ Debes seleccionar un grupo y una asignatura.\");\n                return;\n            }\n\n            try {\n                const respuesta = await fetch(`${url_real}/api/guardar-asignacion`, {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        docenteid: usuarioid,\n                        grupoid: grupoid,\n                        cursoid: cursoid,\n                        nombre_grupo: nombreGrupo,\n                        nombre_asignatura: nombreAsignatura\n                    })\n                });\n\n                const resultado = await respuesta.json();\n                console.log(\"📥 Respuesta de la API:\", resultado);\n\n                if (resultado.exito) {\n                    mostrarNotificacion(\"✅ Asignación guardada correctamente\");\n                    cerrarModalAsignacion();\n                    cargarAsignaciones();\n                } else {\n                    mostrarNotificacion(`⚠️ Error: ${resultado.error || \"No se pudo guardar\"}`);\n                }\n            } catch (error) {\n                console.error(\"⚠️ Error en fetch:\", error);\n                mostrarNotificacion(\"⚠️ Error en la conexión con el servidor.\");\n            }\n        });\n    }\n}\n\nfunction cerrarModalAsignacion() {\n    document.getElementById(\"modalAsignacion\").style.display = \"none\";\n}\n\nasync function cargarOpciones() {\n    try {\n        const respuestaGrupos = await fetch(`${url_real}/api/grupos`);\n        const grupos = await respuestaGrupos.json();\n\n        grupos.sort((a, b) => a.nombre.localeCompare(b.nombre));\n\n        const selectGrupo = document.getElementById(\"selectGrupo\");\n        selectGrupo.innerHTML = '<option value=\"\">-- Seleccionar --</option>';\n        grupos.forEach(grupo => {\n            selectGrupo.innerHTML += `<option value=\"${grupo.idgrupo}\">${grupo.nombre}</option>`;\n        });\n\n        const respuestaAsignaturas = await fetch(`${url_real}/api/asignaturas`);\n        const asignaturas = await respuestaAsignaturas.json();\n\n        const selectAsignatura = document.getElementById(\"selectAsignatura\");\n        selectAsignatura.innerHTML = '<option value=\"\">-- Seleccionar --</option>';\n        asignaturas.forEach(asignatura => {\n            selectAsignatura.innerHTML += `<option value=\"${asignatura.idasignatura}\">${asignatura.nombre}</option>`;\n        });\n\n    } catch (error) {\n        console.error(\"Error cargando opciones:\", error);\n    }\n}\n\n\nasync function cargarAsignaciones() {\n    try {\n        const url = `${url_real}/api/asignaciones`;\n        const respuesta = await fetch(url);\n        const asignaciones = await respuesta.json();\n\n        asignaciones.sort((a, b) => a.nombre_grupo.localeCompare(b.nombre_grupo));\n\n        // console.log(\"Asignaciones recibidas:\", asignaciones);\n\n        // Seleccionar los elementos del DOM\n        const selectGrupos = document.getElementById(\"grupos\");\n        const selectAsignaturas = document.getElementById(\"asignatura\");\n\n        if (!selectGrupos || !selectAsignaturas) {\n            console.error(\"Error: No se encontraron los elementos select en el DOM.\");\n            return;\n        }\n\n        // Limpiar los selectores antes de agregar opciones\n        selectGrupos.innerHTML = `<option value=\"\">--Seleccione--</option>`;\n        selectAsignaturas.innerHTML = `<option value=\"\">--Seleccione--</option>`;\n\n        // Llenar los selectores con los datos recibidos de la API\n        const gruposUnicos = new Set();\n        const asignaturasUnicas = new Set();\n\n       // Recorrer los datos y agregar solo valores únicos\n       asignaciones.forEach(asignacion => {\n        // Filtrar grupos únicos\n        if (asignacion.nombre_grupo && !gruposUnicos.has(asignacion.grupoid)) {\n            gruposUnicos.add(asignacion.grupoid); // Agregar al Set\n            const opcionGrupo = document.createElement(\"option\");\n            opcionGrupo.value = asignacion.grupoid;\n            opcionGrupo.textContent = asignacion.nombre_grupo;\n            selectGrupos.appendChild(opcionGrupo);\n        }\n\n        // Filtrar asignaturas únicas\n        if (asignacion.nombre_asignatura && !asignaturasUnicas.has(asignacion.cursoid)) {\n            asignaturasUnicas.add(asignacion.cursoid); // Agregar al Set\n            const opcionAsignatura = document.createElement(\"option\");\n            opcionAsignatura.value = asignacion.cursoid;\n            opcionAsignatura.textContent = asignacion.nombre_asignatura;\n            selectAsignaturas.appendChild(opcionAsignatura);\n        }\n    });\n\n\n    } catch (error) {\n        console.error(\"Error al cargar asignaciones:\", error);\n    }\n}\n\n\n\n\n\n\n\nasync function consultarApi(){\n    try {\n        const url = `${url_real}/api/estudiantes`;\n        const resultado = await fetch(url);\n        estudiante_global = await resultado.json();\n\n        mostrarEstudiantes(estudiante_global);\n\n        document.getElementById(\"grupos\").addEventListener(\"change\", filtrarEstudiantes);\n\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nasync function consultarReportes(){\n    try {\n        const url = `${url_real}/api/reporte`;\n        const resultado = await fetch(url);\n        reportes_global = await resultado.json();\n\n        mostrarReportes(reportes_global);\n\n        // document.getElementById(\"grupos\").addEventListener(\"change\", filtrarEstudiantes);\n\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n\n// FUNCIONES DE MUESTRA\n\n\nfunction mostrarGrupos(grupos){\n    grupos.forEach(grupo => {\n        const {nombre, id} = grupo\n\n        const nombreGrupo = document.createElement('OPTION');\n        nombreGrupo.textContent = nombre;\n        nombreGrupo.value = id;\n\n        document.querySelector('#grupos').appendChild(nombreGrupo)\n    })\n}\n\n\nfunction mostrarReportes(registros) {\n    const tabla = document.getElementById('filas'); // Seleccionar el tbody donde agregar las filas\n    tabla.innerHTML = \"\"; // Limpiar la tabla antes de agregar nuevos reportes\n\n    // Obtener el usuario autenticado desde el HTML\n    const usuarioActual = document.getElementById(\"usuario-actual\").dataset.nombre || \"\";\n\n    // Ordenar registros por fecha (descendente)\n    registros.sort((a, b) => new Date(b.fechahora) - new Date(a.fechahora));\n\n    registros.forEach(registro => {\n        const { id, estudiante, reporte, comentario, responsable, nombre_asignatura, fechahora, nombre_grupo, codigoid } = registro;\n\n        // Crear una nueva fila para el reporte\n        const fila = document.createElement('tr');\n\n        // Celda del estudiante (no editable)\n        const r_estudiante = document.createElement('td');\n        r_estudiante.textContent = estudiante;\n\n        // 🔥 Celda del reporte (Editable con <select>)\n        const r_reporte = document.createElement('td');\n        if (responsable === usuarioActual) {\n            const selectReporte = document.createElement('select');\n            selectReporte.innerHTML = `\n                <option value=\"falta\" ${reporte === \"falta\" ? \"selected\" : \"\"}>Falta</option>\n                <option value=\"excusa\" ${reporte === \"excusa\" ? \"selected\" : \"\"}>Excusa</option>\n                <option value=\"tarde\" ${reporte === \"tarde\" ? \"selected\" : \"\"}>Tarde</option>\n            `;\n            selectReporte.addEventListener('change', () => actualizarReporte(id, selectReporte.value, comentario));\n            r_reporte.appendChild(selectReporte);\n        } else {\n            r_reporte.textContent = reporte;\n        }\n\n        // 🔥 Celda del comentario (Editable con <textarea>)\n        const r_comentario = document.createElement('td');\n        if (responsable === usuarioActual) {\n            const textareaComentario = document.createElement('textarea');\n            textareaComentario.value = comentario;\n            textareaComentario.rows = 2;\n            textareaComentario.addEventListener('blur', () => actualizarReporte(id, reporte, textareaComentario.value));\n            r_comentario.appendChild(textareaComentario);\n        } else {\n            r_comentario.textContent = comentario;\n        }\n\n        // Celda del responsable\n        const r_responsable = document.createElement('td');\n        r_responsable.textContent = responsable;\n\n        // Celda de la asignatura\n        const r_asignatura = document.createElement('td');\n        r_asignatura.textContent = nombre_asignatura;\n\n        // Celda de la fecha\n        const r_fecha = document.createElement('td');\n        r_fecha.textContent = fechahora;\n\n        // Celda del grupo\n        const r_grupo = document.createElement('td');\n        r_grupo.textContent = nombre_grupo;\n\n        // Celda del código\n        const r_codigo = document.createElement('td');\n        r_codigo.textContent = codigoid;\n\n        // Celda para acciones (Eliminar solo si el usuario es el responsable)\n        const r_acciones = document.createElement('td');\n        if (responsable === usuarioActual) {\n            const botonEliminar = document.createElement('button');\n            botonEliminar.textContent = \"Eliminar\";\n            botonEliminar.classList.add(\"btn-eliminar\");\n            botonEliminar.onclick = () => eliminarReporte(id);\n            r_acciones.appendChild(botonEliminar);\n        } else {\n            r_acciones.textContent = \"🔒\";\n        }\n\n        // Agregar las celdas a la fila\n        fila.appendChild(r_estudiante);\n        fila.appendChild(r_reporte);\n        fila.appendChild(r_comentario);\n        fila.appendChild(r_responsable);\n        fila.appendChild(r_asignatura);\n        fila.appendChild(r_fecha);\n        fila.appendChild(r_grupo);\n        fila.appendChild(r_acciones);\n\n        // Agregar la fila a la tabla\n        tabla.appendChild(fila);\n    });\n}\n\n\n\n\n\n\nfunction mostrarEstudiantes(estudiantes) {\n\n     // Ordenar los estudiantes alfabéticamente por nombre\n    estudiantes.sort((a, b) => a.nombre.localeCompare(b.nombre));\n\n    estudiantes.forEach(estudiante => {\n        const { codigo, documento, fechaNacimiento, nombre_grupo, nombre, estado, fecha , email} = estudiante;\n\n        const nombreEstudiante = document.createElement('H4');\n        nombreEstudiante.classList.add('nombre-estudiante');\n        nombreEstudiante.textContent = nombre;\n        const estadoEstudiante = document.createElement('P');\n        estadoEstudiante.classList.add('estado-estudiante');\n        estadoEstudiante.textContent = estado ? estado : '';\n        if (estado && fecha == hoy) {\n            console.log('cumple');\n            estadoEstudiante.classList.remove('oculto');\n        } else {\n            estadoEstudiante.classList.add('oculto');\n        }\n\n        // Función para crear botones con lápiz\n        function crearBotonConLapiz(texto, clase, novedad) {\n            const boton = document.createElement('BUTTON');\n            boton.classList.add('boton-reporte', clase);\n            boton.textContent = texto;\n            boton.onclick = function (event) {\n                event.stopPropagation();\n                registrarNovedad(estudiante, novedad, false); // Registrar sin modal\n            };\n\n            const lapiz = document.createElement('SPAN');\n            lapiz.classList.add('lapiz-icono');\n            lapiz.innerHTML = \"✏️\";\n            lapiz.onclick = function (event) {\n                event.stopPropagation();\n                registrarNovedad(estudiante, novedad, true); // Registrar con modal\n            };\n\n            boton.appendChild(lapiz);\n            return boton;\n        }\n\n        // Crear botones\n        const botonFalta = crearBotonConLapiz('Falta', 'btn-falta', 'falta');\n        const botonTarde = crearBotonConLapiz('Tarde', 'btn-tarde', 'tarde');\n        const botonExcusa = crearBotonConLapiz('Excusa', 'btn-excusa', 'excusa');\n\n        const ficha = document.createElement('DIV');\n        ficha.classList.add('ficha');\n        ficha.dataset.idFicha = codigo;\n        ficha.onclick = function () {\n            removerSeleccion();\n            ficha.classList.add('seleccionado');\n            verEstudiante(nombre, codigo, documento, fechaNacimiento, nombre_grupo, email);\n        };\n\n        const acciones = document.createElement('DIV');\n        acciones.classList.add('acciones');\n        acciones.appendChild(botonFalta);\n        acciones.appendChild(botonTarde);\n        acciones.appendChild(botonExcusa);\n\n        const info = document.createElement('DIV');\n        info.classList.add('info');\n        info.appendChild(nombreEstudiante);\n        info.appendChild(estadoEstudiante);\n\n        ficha.appendChild(info);\n        ficha.appendChild(acciones);\n\n        document.querySelector('#fichas').appendChild(ficha);\n    });\n}\n\n\n\nfunction mostrarNotificacion(mensaje) {\n    const contenedor = document.getElementById(\"notificacion-container\");\n\n    // Crear la notificación\n    const notificacion = document.createElement(\"div\");\n    notificacion.classList.add(\"notificacion\");\n\n    // Agregar contenido con ícono y texto\n    notificacion.innerHTML = `<i>✅</i> ${mensaje}`;\n\n    // Agregar la notificación al contenedor\n    contenedor.appendChild(notificacion);\n\n    // Eliminar la notificación después de 4 segundos\n    setTimeout(() => {\n        notificacion.remove();\n    }, 4000);\n}\n\n\ndocument.getElementById(\"ver-todos\").addEventListener(\"click\", function () {\n    const grupoSeleccionado = document.getElementById(\"grupos\").value;\n\n    if (!grupoSeleccionado) {\n        mostrarNotificacion(\"⚠️ Debes seleccionar un grupo para ver los registros.\");\n        return;\n    }\n\n    // Quitar selección de estudiante\n    removerSeleccion();\n\n    // Filtrar solo reportes de ese grupo\n    let reportesGrupo = reportes_global.filter(reporte => String(reporte.grupo) === String(grupoSeleccionado));\n\n    mostrarReportes(reportesGrupo);\n});\n\n\n\n\n// ----------------------- FILTROS --------------------\n\n\n\nfunction filtrarEstudiantes() {\n    const grupoSeleccionado = document.getElementById(\"grupos\").value; // Obtener el grupo seleccionado\n\n    console.log(grupoSeleccionado)\n    // Filtrar estudiantes solo si se selecciona un grupo\n    let estudiantesFiltrados = grupoSeleccionado\n        ? estudiante_global.filter(est => est.grupoid === grupoSeleccionado)\n        : estudiante_global; // Si no hay selección, mostrar todos\n\n    // Limpiar el contenedor antes de agregar los nuevos resultados\n    document.querySelector(\"#fichas\").innerHTML = \"\";\n\n    // Mostrar los estudiantes filtrados\n    mostrarEstudiantes(estudiantesFiltrados);\n}\n\n\n\n\nfunction filtrarReportesPorEstudiante(codigoEstudiante) {\n    console.log(\"Código seleccionado:\", codigoEstudiante);\n    console.log(\"Lista de reportes:\", reportes_global);\n\n    let reportesFiltrados = reportes_global.filter(reporte => String(reporte.codigoid) === String(codigoEstudiante));\n\n    console.log(\"Reportes filtrados:\", reportesFiltrados); // Esto nos dirá si hay coincidencias\n\n    mostrarReportes(reportesFiltrados);\n}\n\nfunction filtrarTabla(columna) {\n    // Obtener el valor del input\n    const input = document.querySelectorAll(\"thead input\")[columna];\n    const filtro = input.value.toUpperCase();\n    const tabla = document.getElementById(\"miTabla\");\n    const filas = tabla.getElementsByTagName(\"tr\");\n    \n    // Iterar sobre las filas del cuerpo de la tabla\n    for (let i = 1; i < filas.length; i++) {\n      const celda = filas[i].getElementsByTagName(\"td\")[columna];\n      if (celda) {\n        const textoCelda = celda.textContent || celda.innerText;\n        filas[i].style.display = textoCelda.toUpperCase().indexOf(filtro) > -1 ? \"\" : \"none\";\n      }\n    }\n  }\n\n  function filtrarEstudiantesPorBusqueda() {\n    const textoBusqueda = document.getElementById(\"buscador\").value.toLowerCase().trim();\n\n    // Filtrar estudiantes por nombre, apellidos, código o documento\n    let estudiantesFiltrados = estudiante_global.filter(estudiante => {\n        const nombreCompleto = `${estudiante.nombre}`.toLowerCase();\n        const codigo = `${estudiante.codigo}`.toLowerCase();\n        const documento = `${estudiante.documento}`.toLowerCase();\n\n        return nombreCompleto.includes(textoBusqueda) ||\n               codigo.includes(textoBusqueda) ||\n               documento.includes(textoBusqueda);\n    });\n\n    // Limpiar el contenedor antes de mostrar los resultados filtrados\n    document.querySelector(\"#fichas\").innerHTML = \"\";\n\n    // Mostrar los estudiantes filtrados\n    mostrarEstudiantes(estudiantesFiltrados);\n}\n\n\n\n\n// ------------------------ FUNCIONALIDADES ------------------\n\n\nfunction removerSeleccion() {\n    const fichas = document.querySelectorAll('.ficha.seleccionado');\n    fichas.forEach(ficha => ficha.classList.remove('seleccionado'));\n}\n\n\nfunction verEstudiante(nombre, codigo, documento, fechaNacimiento, nombreGrupo, email){\n    \n    let info_nombre = document.getElementById('info_nombre');\n    let info_codigo = document.getElementById('info_codigo');\n    let info_documento = document.getElementById('info_documento');\n    let info_fechaNacimiento = document.getElementById('info_fechaNacimiento');\n    let info_grado = document.getElementById('info_grado');\n    let info_correo = document.getElementById('info_correo');\n\n\n    info_nombre.innerHTML = `<strong>Nombre: </strong>${nombre}`;\n    info_codigo.innerHTML = `<strong>Código: </strong>${codigo}`;\n    info_documento.innerHTML = `<strong>Documento: </strong>${documento}`;\n    info_fechaNacimiento.innerHTML = `<strong>Fecha de Nacimiento: </strong>${fechaNacimiento}`;\n    info_grado.innerHTML = `<strong>Grupo: </strong>${nombreGrupo}`;\n    info_correo.innerHTML = `<strong>Correo: </strong>${email}`;\n\n\n    // ACTUALIZAR estudiante_sel con el código del estudiante seleccionado\n    estudiante_sel.codigo = codigo;\n\n    // console.log(\"Código del estudiante seleccionado:\", codigo);\n    // console.log(\"Valor actualizado en estudiante_sel:\", estudiante_sel.codigo);\n    // Filtrar la tabla de reportes según el estudiante seleccionado\n    filtrarReportesPorEstudiante(codigo);\n}\n\n\n// Calendario\n\nfunction iniciarCalendario() {\n    var calendarEl = document.getElementById('calendar');\n    var calendar = new FullCalendar.Calendar(calendarEl, {\n        initialView: 'dayGridMonth',\n        locale: 'es',\n        events: '/api/reservas'\n    });\n\n    calendar.render();\n}\n\n// Función para abrir el modal\nfunction abrirModalReserva() {\n    document.getElementById(\"modalReserva\").style.display = \"block\";\n}\n\n// Función para cerrar el modal\nfunction cerrarModalReserva() {\n    document.getElementById(\"modalReserva\").style.display = \"none\";\n}\n\n\n\n\n\n\n// REGISTROS\n\n// Función para registrar novedad directamente o con comentario\nasync function registrarNovedad(estudiante, reporte, usarModal = false) {\n    estudianteActual = estudiante;\n    tipoReporteActual = reporte;\n\n    // Si `usarModal` es verdadero, abrimos el modal para ingresar comentario\n    if (usarModal) {\n        abrirModalComentario(estudiante, reporte);\n        return;\n    }\n\n    // Si no se usa el modal, registrar la novedad de inmediato sin comentario\n    await enviarNovedad(estudiante, reporte, \"\");\n}\n\nasync function actualizarReporte(id, nuevoReporte, nuevoComentario) {\n    if (!id) return;\n\n    const datos = new FormData();\n    datos.append('id', id);\n    datos.append('reporte', nuevoReporte);\n    datos.append('comentario', nuevoComentario);\n\n    try {\n        const respuesta = await fetch(`${url_real}/api/actualizar-asistencia`, {\n            method: \"POST\",\n            body: datos\n        });\n\n        const resultado = await respuesta.json();\n\n        if (resultado.exito) {\n            mostrarNotificacion(\"✅ Registro actualizado correctamente\");\n        } else {\n            mostrarNotificacion(\"⚠️ Error al actualizar el registro.\");\n        }\n    } catch (error) {\n        console.error(\"Error en la actualización:\", error);\n        mostrarNotificacion(\"⚠️ Error en la actualización.\");\n    }\n}\n\n\n// Función para abrir el modal de comentarios\nfunction abrirModalComentario(estudiante, reporte) {\n    estudianteActual = estudiante;\n    tipoReporteActual = reporte;\n\n    document.getElementById(\"comentarioEstudiante\").textContent = estudiante.nombre;\n    document.getElementById(\"comentarioReporte\").textContent = reporte;\n    document.getElementById(\"comentario\").value = \"\"; // Limpiar comentario\n\n    document.getElementById(\"modalComentario\").style.display = \"block\";\n}\n\n// Función para cerrar el modal de comentarios\nfunction cerrarModalComentario() {\n    document.getElementById(\"modalComentario\").style.display = \"none\";\n}\n\n// Evento para enviar la novedad con comentario cuando se envíe el formulario del modal\ndocument.getElementById(\"formComentario\").addEventListener(\"submit\", async function (event) {\n    event.preventDefault(); // Evitar recarga de la página\n\n    const comentario = document.getElementById(\"comentario\").value.trim();\n    if (!comentario) {\n        mostrarNotificacion(\"⚠️ Debes escribir un comentario.\");\n        return;\n    }\n\n    await enviarNovedad(estudianteActual, tipoReporteActual, comentario);\n    cerrarModalComentario();\n});\n\n// Función para enviar la novedad a la API\n// Función para enviar la novedad a la API\n// 🔥 Función para enviar la novedad a la API\nasync function enviarNovedad(estudiante, reporte, comentario) {\n    if (!estudiante || !reporte) {\n        mostrarNotificacion(\"⚠️ Ocurrió un error al registrar la novedad.\");\n        return;\n    }\n\n    const grupoSeleccionado = document.getElementById(\"grupos\").value;\n    const asignaturaSeleccionada = document.getElementById(\"asignatura\").value;\n\n    if (!grupoSeleccionado || !asignaturaSeleccionada) {\n        mostrarNotificacion(\"⚠️ Debes seleccionar un grupo y una asignatura antes de registrar.\");\n        return;\n    }\n\n    const datos = new FormData();\n    datos.append('estudiante', estudiante.nombre);\n    datos.append('codigoid', estudiante.codigo);\n    datos.append('reporte', reporte);\n    datos.append('comentario', comentario);\n    datos.append('grupo', grupoSeleccionado);\n    datos.append(\"asignaturaid\", asignaturaSeleccionada);\n\n    try {\n        console.log(\"📤 Enviando datos a la API...\", Object.fromEntries(datos)); // 🛠 DEPURACIÓN\n\n        const respuesta = await fetch(`${url_real}/api/asistencia`, {\n            method: 'POST',\n            body: datos\n        });\n\n        const resultado = await respuesta.json();\n        console.log(\"📥 Respuesta de la API:\", resultado); // 🛠 DEPURACIÓN\n\n        // ✅ Validar que la API devuelva exito: true\n        if (resultado.resultado === true) {\n            mostrarNotificacion(\"✅ Registro exitoso\");\n\n            // 🛠 DEPURACIÓN: Comprobar reportes antes de actualizar\n            console.log(\"🔄 Cargando reportes después del registro...\");\n\n            await consultarReportes(); // Recargar reportes\n            filtrarReportesPorEstudiante(estudiante.codigo); // Mostrar solo los del estudiante\n\n            // 🔄 Actualizar la información del estudiante en info-detallada\n            verEstudiante(estudiante.nombre, estudiante.codigo, estudiante.documento, estudiante.fechaNacimiento, estudiante.nombre_grupo, estudiante.email);\n        } else {\n            console.error(\"⚠️ Error en la API:\", resultado);\n            mostrarNotificacion(\"⚠️ Error al registrar la novedad.\");\n        }\n    } catch (error) {\n        console.error(\"⚠️ Error en fetch:\", error);\n        mostrarNotificacion(\"⚠️ Error al registrar la novedad.\");\n    }\n}\n\n\n\nasync function eliminarReporte(id) {\n    if (!confirm(\"¿Estás seguro de que deseas eliminar este reporte?\")) {\n        return;\n    }\n\n    try {\n        const url = `${url_real}/api/eliminar-asistencia`; // Asegúrate de que la ruta sea correcta\n\n        const formData = new FormData();\n        formData.append(\"id\", id);\n\n        const respuesta = await fetch(url, {\n            method: \"POST\",\n            body: formData\n        });\n\n        if (!respuesta.ok) {\n            throw new Error(\"Error al eliminar el reporte\");\n        }\n\n        const resultado = await respuesta.json();\n        console.log(\"Reporte eliminado:\", resultado);\n\n        // Volver a cargar los reportes desde la API\n        await consultarReportes();\n\n        // console.log(\"Código actual en estudiante_sel:\", estudiante_sel.codigo);\n\n        // Verificar si estudiante_sel.codigo tiene un valor válido antes de filtrar\n        if (estudiante_sel.codigo) {\n            filtrarReportesPorEstudiante(estudiante_sel.codigo);\n        } else {\n            console.warn(\"No hay estudiante seleccionado para filtrar reportes.\");\n        }\n\n        // Mostrar notificación\n        mostrarNotificacion(\"Reporte eliminado con éxito ❌\");\n\n    } catch (error) {\n        console.error(\"Error al eliminar reporte:\", error);\n        mostrarNotificacion(\"Error al eliminar el reporte ❌\");\n    }\n}\n\n\n// Reporte grupo completo\n\n// Función para verificar el estado del grupo seleccionado\nfunction verificarEstadoGrupo() {\n    const grupoId = document.getElementById(\"grupos\").value;\n    const botonGrupoCompleto = document.getElementById(\"grupo-completo\");\n\n    // Buscar si el grupo tiene el estado \"completo\" para la fecha actual\n    const grupo = estadoGrupos.find(\n        (g) => g.idgrupo == grupoId && g.completo === \"completo\" && g.fecha === hoy\n    );\n\n    // Deshabilitar o habilitar el botón según el estado del grupo\n    if (grupo) {\n        botonGrupoCompleto.disabled = true;\n        botonGrupoCompleto.classList.add('deshabilitado')\n        mostrarNotificacion(`El grupo está completo hoy 👍🏻`);\n    } else {\n        botonGrupoCompleto.disabled = false;\n    }\n}\n\n// Escucha el cambio en el selector de grupos\ndocument.getElementById(\"grupos\").addEventListener(\"change\", verificarEstadoGrupo);\n\n// Función para marcar un grupo como completo\ndocument.getElementById(\"grupo-completo\").addEventListener(\"click\", async function () {\n    const grupoId = document.getElementById(\"grupos\").value;\n    const fechaActual = new Date().toISOString().split(\"T\")[0]; // Fecha en formato YYYY-MM-DD\n\n    if (!grupoId) {\n        mostrarNotificacion(\"Seleccione un grupo\");\n        return;\n    }\n\n    const formData = new FormData();\n    formData.append(\"grupo\", grupoId);\n    formData.append(\"completo\", \"completo\");\n    formData.append(\"fecha\", fechaActual);\n\n    try {\n        const respuesta = await fetch(`${url_real}/api/grupo-completo`, {\n            method: \"POST\",\n            body: formData,\n        });\n\n        const resultado = await respuesta.json();\n\n        if (resultado.exito) {\n            mostrarNotificacion(\"Grupo marcado como completo 👍🏻\");\n            document.getElementById(\"grupo-completo\").disabled = true; // Desactivar el botón\n            await cargarEstadoGrupos(); // Recargar el estado de los grupos\n        } else {\n            alert(\"Error al actualizar el grupo\");\n        }\n    } catch (error) {\n        console.error(\"Error al marcar grupo completo:\", error);\n    }\n});\n\n\n\n"]}