{"version":3,"sources":["docentes.js"],"names":["estudiante_sel","codigo","fecha","grupo","reporte","hoy","Date","toISOString","split","estudiante_global","grupos_global","reportes_global","estadoGrupos","estudianteActual","tipoReporteActual","async","cargarEstadoGrupos","respuesta","fetch","json","console","log","error","iniciarApp","consultarApi","consultarReportes","cargarAsignaciones","verificarEstadoGrupo","url","asignaciones","selectGrupos","document","getElementById","selectAsignaturas","innerHTML","forEach","asignacion","nombre_grupo","opcionGrupo","createElement","value","grupoid","textContent","appendChild","nombre_asignatura","opcionAsignatura","cursoid","resultado","mostrarEstudiantes","addEventListener","filtrarEstudiantes","mostrarReportes","mostrarGrupos","grupos","nombre","id","nombreGrupo","querySelector","registros","tabla","usuarioActual","dataset","sort","a","b","fechahora","registro","estudiante","comentario","responsable","codigoid","fila","r_estudiante","r_reporte","selectReporte","actualizarReporte","r_comentario","textareaComentario","rows","r_responsable","r_asignatura","r_fecha","r_grupo","r_acciones","botonEliminar","classList","add","onclick","eliminarReporte","estudiantes","documento","fechaNacimiento","estado","email","nombreEstudiante","estadoEstudiante","crearBotonConLapiz","texto","clase","novedad","boton","event","stopPropagation","registrarNovedad","lapiz","remove","botonFalta","botonTarde","botonExcusa","ficha","idFicha","removerSeleccion","verEstudiante","acciones","info","mostrarNotificacion","mensaje","contenedor","notificacion","setTimeout","grupoSeleccionado","estudiantesFiltrados","filter","est","filtrarReportesPorEstudiante","codigoEstudiante","reportesFiltrados","String","filtrarTabla","columna","filtro","querySelectorAll","toUpperCase","filas","getElementsByTagName","i","length","celda","textoCelda","innerText","style","display","indexOf","filtrarEstudiantesPorBusqueda","textoBusqueda","toLowerCase","trim","nombreCompleto","includes","info_nombre","info_codigo","info_documento","info_fechaNacimiento","info_grado","info_correo","iniciarCalendario","calendarEl","FullCalendar","Calendar","initialView","locale","events","render","abrirModalReserva","cerrarModalReserva","usarModal","abrirModalComentario","enviarNovedad","nuevoReporte","nuevoComentario","datos","FormData","append","method","body","exito","cerrarModalComentario","asignaturaSeleccionada","Object","fromEntries","confirm","formData","ok","Error","warn","grupoId","botonGrupoCompleto","find","g","idgrupo","completo","disabled","buscador","preventDefault","fechaActual","alert"],"mappings":"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","file":"docentes.min.js","sourcesContent":["// VARIABLES\n\nconst estudiante_sel = {\n    codigo: '',\n    fecha: '',\n    grupo: '',\n    reporte: ''\n}\n\nconst hoy = new Date().toISOString().split('T')[0];\n\nlet estudiante_global = []\nlet grupos_global = []\nlet reportes_global = []\nlet estadoGrupos = []; // Variable para almacenar el estado de los grupos\nlet estudianteActual = null;\nlet tipoReporteActual = \"\";\n\n\n// DOM\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    iniciarApp();\n    cargarEstadoGrupos(); // Cargaar el estado de los grupos al inicio\n\n     // Agregar evento al buscador\n     const buscador = document.getElementById(\"buscador\");\n     if (buscador) {\n         buscador.addEventListener(\"keyup\", filtrarEstudiantesPorBusqueda);\n     }\n});\n\n\nasync function cargarEstadoGrupos() {\n    try {\n        const respuesta = await fetch(\"http://localhost:3002/api/estado-grupos\");\n        estadoGrupos = await respuesta.json(); // Guardar el estado de los grupos\n        console.log(\"Estado de los grupos:\", estadoGrupos);\n    } catch (error) {\n        console.error(\"Error al cargar el estado de los grupos:\", error);\n    }\n}\n\nfunction iniciarApp(){\n    // consultarGrupos();\n    consultarApi();\n    consultarReportes();\n    cargarAsignaciones();\n    verificarEstadoGrupo(); // Verificar el estado del grupo seleccionado\n\n}\n\n\n\n// CONSULTAS\n\n// async function consultarGrupos(){\n//     try {\n//         const url = 'http://localhost:3002/api/grupos';\n//         const resultado = await fetch(url);\n//         grupos_global = await resultado.json();\n\n//         mostrarGrupos(grupos_global);\n\n//     } catch (error) {\n//         console.log(error);\n//     }\n// }\n\nasync function cargarAsignaciones() {\n    try {\n        const url = 'http://localhost:3002/api/asignaciones';\n        const respuesta = await fetch(url);\n        const asignaciones = await respuesta.json();\n\n        // console.log(\"Asignaciones recibidas:\", asignaciones);\n\n        // Seleccionar los elementos del DOM\n        const selectGrupos = document.getElementById(\"grupos\");\n        const selectAsignaturas = document.getElementById(\"asignatura\");\n\n        if (!selectGrupos || !selectAsignaturas) {\n            console.error(\"Error: No se encontraron los elementos select en el DOM.\");\n            return;\n        }\n\n        // Limpiar los selectores antes de agregar opciones\n        selectGrupos.innerHTML = `<option value=\"\">--Seleccione--</option>`;\n        selectAsignaturas.innerHTML = `<option value=\"\">--Seleccione--</option>`;\n\n        // Llenar los selectores con los datos recibidos de la API\n        asignaciones.forEach(asignacion => {\n            if (asignacion.nombre_grupo) {\n                const opcionGrupo = document.createElement(\"option\");\n                opcionGrupo.value = asignacion.grupoid;\n                opcionGrupo.textContent = asignacion.nombre_grupo;\n                selectGrupos.appendChild(opcionGrupo);\n            }\n\n            if (asignacion.nombre_asignatura) {\n                const opcionAsignatura = document.createElement(\"option\");\n                opcionAsignatura.value = asignacion.cursoid;\n                opcionAsignatura.textContent = asignacion.nombre_asignatura;\n                selectAsignaturas.appendChild(opcionAsignatura);\n            }\n        });\n\n        // console.log(\"Opciones de grupos agregadas:\", selectGrupos.innerHTML);\n        // console.log(\"Opciones de asignaturas agregadas:\", selectAsignaturas.innerHTML);\n\n    } catch (error) {\n        console.error(\"Error al cargar asignaciones:\", error);\n    }\n}\n\n\n\n\n\n\n\nasync function consultarApi(){\n    try {\n        const url = 'http://localhost:3002/api/estudiantes';\n        const resultado = await fetch(url);\n        estudiante_global = await resultado.json();\n\n        mostrarEstudiantes(estudiante_global);\n\n        document.getElementById(\"grupos\").addEventListener(\"change\", filtrarEstudiantes);\n\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nasync function consultarReportes(){\n    try {\n        const url = 'http://localhost:3002/api/reporte';\n        const resultado = await fetch(url);\n        reportes_global = await resultado.json();\n\n        mostrarReportes(reportes_global);\n\n        // document.getElementById(\"grupos\").addEventListener(\"change\", filtrarEstudiantes);\n\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n\n// FUNCIONES DE MUESTRA\n\n\nfunction mostrarGrupos(grupos){\n    grupos.forEach(grupo => {\n        const {nombre, id} = grupo\n\n        const nombreGrupo = document.createElement('OPTION');\n        nombreGrupo.textContent = nombre;\n        nombreGrupo.value = id;\n\n        document.querySelector('#grupos').appendChild(nombreGrupo)\n    })\n}\n\n\nfunction mostrarReportes(registros) {\n    const tabla = document.getElementById('filas'); // Seleccionar el tbody donde agregar las filas\n    tabla.innerHTML = \"\"; // Limpiar la tabla antes de agregar nuevos reportes\n\n    // Obtener el usuario autenticado desde el HTML\n    const usuarioActual = document.getElementById(\"usuario-actual\").dataset.nombre || \"\";\n\n    // Ordenar registros por fecha (descendente)\n    registros.sort((a, b) => new Date(b.fechahora) - new Date(a.fechahora));\n\n    registros.forEach(registro => {\n        const { id, estudiante, reporte, comentario, responsable, nombre_asignatura, fechahora, nombre_grupo, codigoid } = registro;\n\n        // Crear una nueva fila para el reporte\n        const fila = document.createElement('tr');\n\n        // Celda del estudiante (no editable)\n        const r_estudiante = document.createElement('td');\n        r_estudiante.textContent = estudiante;\n\n        // 🔥 Celda del reporte (Editable con <select>)\n        const r_reporte = document.createElement('td');\n        if (responsable === usuarioActual) {\n            const selectReporte = document.createElement('select');\n            selectReporte.innerHTML = `\n                <option value=\"falta\" ${reporte === \"falta\" ? \"selected\" : \"\"}>Falta</option>\n                <option value=\"excusa\" ${reporte === \"excusa\" ? \"selected\" : \"\"}>Excusa</option>\n                <option value=\"tarde\" ${reporte === \"tarde\" ? \"selected\" : \"\"}>Tarde</option>\n            `;\n            selectReporte.addEventListener('change', () => actualizarReporte(id, selectReporte.value, comentario));\n            r_reporte.appendChild(selectReporte);\n        } else {\n            r_reporte.textContent = reporte;\n        }\n\n        // 🔥 Celda del comentario (Editable con <textarea>)\n        const r_comentario = document.createElement('td');\n        if (responsable === usuarioActual) {\n            const textareaComentario = document.createElement('textarea');\n            textareaComentario.value = comentario;\n            textareaComentario.rows = 2;\n            textareaComentario.addEventListener('blur', () => actualizarReporte(id, reporte, textareaComentario.value));\n            r_comentario.appendChild(textareaComentario);\n        } else {\n            r_comentario.textContent = comentario;\n        }\n\n        // Celda del responsable\n        const r_responsable = document.createElement('td');\n        r_responsable.textContent = responsable;\n\n        // Celda de la asignatura\n        const r_asignatura = document.createElement('td');\n        r_asignatura.textContent = nombre_asignatura;\n\n        // Celda de la fecha\n        const r_fecha = document.createElement('td');\n        r_fecha.textContent = fechahora;\n\n        // Celda del grupo\n        const r_grupo = document.createElement('td');\n        r_grupo.textContent = nombre_grupo;\n\n        // Celda del código\n        const r_codigo = document.createElement('td');\n        r_codigo.textContent = codigoid;\n\n        // Celda para acciones (Eliminar solo si el usuario es el responsable)\n        const r_acciones = document.createElement('td');\n        if (responsable === usuarioActual) {\n            const botonEliminar = document.createElement('button');\n            botonEliminar.textContent = \"Eliminar\";\n            botonEliminar.classList.add(\"btn-eliminar\");\n            botonEliminar.onclick = () => eliminarReporte(id);\n            r_acciones.appendChild(botonEliminar);\n        } else {\n            r_acciones.textContent = \"🔒\";\n        }\n\n        // Agregar las celdas a la fila\n        fila.appendChild(r_estudiante);\n        fila.appendChild(r_reporte);\n        fila.appendChild(r_comentario);\n        fila.appendChild(r_responsable);\n        fila.appendChild(r_asignatura);\n        fila.appendChild(r_fecha);\n        fila.appendChild(r_grupo);\n        fila.appendChild(r_acciones);\n\n        // Agregar la fila a la tabla\n        tabla.appendChild(fila);\n    });\n}\n\n\n\n\n\n\nfunction mostrarEstudiantes(estudiantes) {\n    estudiantes.forEach(estudiante => {\n        const { codigo, documento, fechaNacimiento, nombre_grupo, nombre, estado, fecha , email} = estudiante;\n\n        const nombreEstudiante = document.createElement('H4');\n        nombreEstudiante.classList.add('nombre-estudiante');\n        nombreEstudiante.textContent = nombre;\n\n        const estadoEstudiante = document.createElement('P');\n        estadoEstudiante.classList.add('estado-estudiante');\n        estadoEstudiante.textContent = estado ? estado : '';\n        if (estado && fecha === hoy) {\n            estadoEstudiante.classList.remove('oculto');\n        } else {\n            estadoEstudiante.classList.add('oculto');\n        }\n\n        // Función para crear botones con lápiz\n        function crearBotonConLapiz(texto, clase, novedad) {\n            const boton = document.createElement('BUTTON');\n            boton.classList.add('boton-reporte', clase);\n            boton.textContent = texto;\n            boton.onclick = function (event) {\n                event.stopPropagation();\n                registrarNovedad(estudiante, novedad, false); // Registrar sin modal\n            };\n\n            const lapiz = document.createElement('SPAN');\n            lapiz.classList.add('lapiz-icono');\n            lapiz.innerHTML = \"✏️\";\n            lapiz.onclick = function (event) {\n                event.stopPropagation();\n                registrarNovedad(estudiante, novedad, true); // Registrar con modal\n            };\n\n            boton.appendChild(lapiz);\n            return boton;\n        }\n\n        // Crear botones\n        const botonFalta = crearBotonConLapiz('Falta', 'btn-falta', 'falta');\n        const botonTarde = crearBotonConLapiz('Tarde', 'btn-tarde', 'tarde');\n        const botonExcusa = crearBotonConLapiz('Excusa', 'btn-excusa', 'excusa');\n\n        const ficha = document.createElement('DIV');\n        ficha.classList.add('ficha');\n        ficha.dataset.idFicha = codigo;\n        ficha.onclick = function () {\n            removerSeleccion();\n            ficha.classList.add('seleccionado');\n            verEstudiante(nombre, codigo, documento, fechaNacimiento, nombre_grupo, email);\n        };\n\n        const acciones = document.createElement('DIV');\n        acciones.classList.add('acciones');\n        acciones.appendChild(botonFalta);\n        acciones.appendChild(botonTarde);\n        acciones.appendChild(botonExcusa);\n\n        const info = document.createElement('DIV');\n        info.classList.add('info');\n        info.appendChild(nombreEstudiante);\n        info.appendChild(estadoEstudiante);\n\n        ficha.appendChild(info);\n        ficha.appendChild(acciones);\n\n        document.querySelector('#fichas').appendChild(ficha);\n    });\n}\n\n\n\nfunction mostrarNotificacion(mensaje) {\n    const contenedor = document.getElementById(\"notificacion-container\");\n\n    // Crear la notificación\n    const notificacion = document.createElement(\"div\");\n    notificacion.classList.add(\"notificacion\");\n\n    // Agregar contenido con ícono y texto\n    notificacion.innerHTML = `<i>✅</i> ${mensaje}`;\n\n    // Agregar la notificación al contenedor\n    contenedor.appendChild(notificacion);\n\n    // Eliminar la notificación después de 4 segundos\n    setTimeout(() => {\n        notificacion.remove();\n    }, 4000);\n}\n\n\ndocument.getElementById(\"ver-todos\").addEventListener(\"click\", function () {\n    const grupoSeleccionado = document.getElementById(\"grupos\").value;\n\n    if (!grupoSeleccionado) {\n        mostrarNotificacion(\"⚠️ Debes seleccionar un grupo para ver los registros.\");\n        return;\n    }\n\n    // Quitar selección de estudiante\n    removerSeleccion();\n\n    // Filtrar solo reportes de ese grupo\n    let reportesGrupo = reportes_global.filter(reporte => String(reporte.grupo) === String(grupoSeleccionado));\n\n    mostrarReportes(reportesGrupo);\n});\n\n\n\n\n// ----------------------- FILTROS --------------------\n\n\n\nfunction filtrarEstudiantes() {\n    const grupoSeleccionado = document.getElementById(\"grupos\").value; // Obtener el grupo seleccionado\n\n    console.log(grupoSeleccionado)\n    // Filtrar estudiantes solo si se selecciona un grupo\n    let estudiantesFiltrados = grupoSeleccionado\n        ? estudiante_global.filter(est => est.grupoid === grupoSeleccionado)\n        : estudiante_global; // Si no hay selección, mostrar todos\n\n    // Limpiar el contenedor antes de agregar los nuevos resultados\n    document.querySelector(\"#fichas\").innerHTML = \"\";\n\n    // Mostrar los estudiantes filtrados\n    mostrarEstudiantes(estudiantesFiltrados);\n}\n\n\n\n\nfunction filtrarReportesPorEstudiante(codigoEstudiante) {\n    console.log(\"Código seleccionado:\", codigoEstudiante);\n    console.log(\"Lista de reportes:\", reportes_global);\n\n    let reportesFiltrados = reportes_global.filter(reporte => String(reporte.codigoid) === String(codigoEstudiante));\n\n    console.log(\"Reportes filtrados:\", reportesFiltrados); // Esto nos dirá si hay coincidencias\n\n    mostrarReportes(reportesFiltrados);\n}\n\nfunction filtrarTabla(columna) {\n    // Obtener el valor del input\n    const input = document.querySelectorAll(\"thead input\")[columna];\n    const filtro = input.value.toUpperCase();\n    const tabla = document.getElementById(\"miTabla\");\n    const filas = tabla.getElementsByTagName(\"tr\");\n    \n    // Iterar sobre las filas del cuerpo de la tabla\n    for (let i = 1; i < filas.length; i++) {\n      const celda = filas[i].getElementsByTagName(\"td\")[columna];\n      if (celda) {\n        const textoCelda = celda.textContent || celda.innerText;\n        filas[i].style.display = textoCelda.toUpperCase().indexOf(filtro) > -1 ? \"\" : \"none\";\n      }\n    }\n  }\n\n  function filtrarEstudiantesPorBusqueda() {\n    const textoBusqueda = document.getElementById(\"buscador\").value.toLowerCase().trim();\n\n    // Filtrar estudiantes por nombre, apellidos, código o documento\n    let estudiantesFiltrados = estudiante_global.filter(estudiante => {\n        const nombreCompleto = `${estudiante.nombre}`.toLowerCase();\n        const codigo = `${estudiante.codigo}`.toLowerCase();\n        const documento = `${estudiante.documento}`.toLowerCase();\n\n        return nombreCompleto.includes(textoBusqueda) ||\n               codigo.includes(textoBusqueda) ||\n               documento.includes(textoBusqueda);\n    });\n\n    // Limpiar el contenedor antes de mostrar los resultados filtrados\n    document.querySelector(\"#fichas\").innerHTML = \"\";\n\n    // Mostrar los estudiantes filtrados\n    mostrarEstudiantes(estudiantesFiltrados);\n}\n\n\n\n\n// ------------------------ FUNCIONALIDADES ------------------\n\n\nfunction removerSeleccion() {\n    const fichas = document.querySelectorAll('.ficha.seleccionado');\n    fichas.forEach(ficha => ficha.classList.remove('seleccionado'));\n}\n\n\nfunction verEstudiante(nombre, codigo, documento, fechaNacimiento, nombreGrupo, email){\n    \n    let info_nombre = document.getElementById('info_nombre');\n    let info_codigo = document.getElementById('info_codigo');\n    let info_documento = document.getElementById('info_documento');\n    let info_fechaNacimiento = document.getElementById('info_fechaNacimiento');\n    let info_grado = document.getElementById('info_grado');\n    let info_correo = document.getElementById('info_correo');\n\n\n    info_nombre.innerHTML = `<strong>Nombre: </strong>${nombre}`;\n    info_codigo.innerHTML = `<strong>Código: </strong>${codigo}`;\n    info_documento.innerHTML = `<strong>Documento: </strong>${documento}`;\n    info_fechaNacimiento.innerHTML = `<strong>Fecha de Nacimiento: </strong>${fechaNacimiento}`;\n    info_grado.innerHTML = `<strong>Grupo: </strong>${nombreGrupo}`;\n    info_correo.innerHTML = `<strong>Correo: </strong>${email}`;\n\n\n    // ACTUALIZAR estudiante_sel con el código del estudiante seleccionado\n    estudiante_sel.codigo = codigo;\n\n    // console.log(\"Código del estudiante seleccionado:\", codigo);\n    // console.log(\"Valor actualizado en estudiante_sel:\", estudiante_sel.codigo);\n    // Filtrar la tabla de reportes según el estudiante seleccionado\n    filtrarReportesPorEstudiante(codigo);\n}\n\n\n// Calendario\n\nfunction iniciarCalendario() {\n    var calendarEl = document.getElementById('calendar');\n    var calendar = new FullCalendar.Calendar(calendarEl, {\n        initialView: 'dayGridMonth',\n        locale: 'es',\n        events: '/api/reservas'\n    });\n\n    calendar.render();\n}\n\n// Función para abrir el modal\nfunction abrirModalReserva() {\n    document.getElementById(\"modalReserva\").style.display = \"block\";\n}\n\n// Función para cerrar el modal\nfunction cerrarModalReserva() {\n    document.getElementById(\"modalReserva\").style.display = \"none\";\n}\n\n\n\n\n\n\n// REGISTROS\n\n// Función para registrar novedad directamente o con comentario\nasync function registrarNovedad(estudiante, reporte, usarModal = false) {\n    estudianteActual = estudiante;\n    tipoReporteActual = reporte;\n\n    // Si `usarModal` es verdadero, abrimos el modal para ingresar comentario\n    if (usarModal) {\n        abrirModalComentario(estudiante, reporte);\n        return;\n    }\n\n    // Si no se usa el modal, registrar la novedad de inmediato sin comentario\n    await enviarNovedad(estudiante, reporte, \"\");\n}\n\nasync function actualizarReporte(id, nuevoReporte, nuevoComentario) {\n    if (!id) return;\n\n    const datos = new FormData();\n    datos.append('id', id);\n    datos.append('reporte', nuevoReporte);\n    datos.append('comentario', nuevoComentario);\n\n    try {\n        const respuesta = await fetch(\"http://localhost:3002/api/actualizar-asistencia\", {\n            method: \"POST\",\n            body: datos\n        });\n\n        const resultado = await respuesta.json();\n\n        if (resultado.exito) {\n            mostrarNotificacion(\"✅ Registro actualizado correctamente\");\n        } else {\n            mostrarNotificacion(\"⚠️ Error al actualizar el registro.\");\n        }\n    } catch (error) {\n        console.error(\"Error en la actualización:\", error);\n        mostrarNotificacion(\"⚠️ Error en la actualización.\");\n    }\n}\n\n\n// Función para abrir el modal de comentarios\nfunction abrirModalComentario(estudiante, reporte) {\n    estudianteActual = estudiante;\n    tipoReporteActual = reporte;\n\n    document.getElementById(\"comentarioEstudiante\").textContent = estudiante.nombre;\n    document.getElementById(\"comentarioReporte\").textContent = reporte;\n    document.getElementById(\"comentario\").value = \"\"; // Limpiar comentario\n\n    document.getElementById(\"modalComentario\").style.display = \"block\";\n}\n\n// Función para cerrar el modal de comentarios\nfunction cerrarModalComentario() {\n    document.getElementById(\"modalComentario\").style.display = \"none\";\n}\n\n// Evento para enviar la novedad con comentario cuando se envíe el formulario del modal\ndocument.getElementById(\"formComentario\").addEventListener(\"submit\", async function (event) {\n    event.preventDefault(); // Evitar recarga de la página\n\n    const comentario = document.getElementById(\"comentario\").value.trim();\n    if (!comentario) {\n        mostrarNotificacion(\"⚠️ Debes escribir un comentario.\");\n        return;\n    }\n\n    await enviarNovedad(estudianteActual, tipoReporteActual, comentario);\n    cerrarModalComentario();\n});\n\n// Función para enviar la novedad a la API\n// Función para enviar la novedad a la API\n// 🔥 Función para enviar la novedad a la API\nasync function enviarNovedad(estudiante, reporte, comentario) {\n    if (!estudiante || !reporte) {\n        mostrarNotificacion(\"⚠️ Ocurrió un error al registrar la novedad.\");\n        return;\n    }\n\n    const grupoSeleccionado = document.getElementById(\"grupos\").value;\n    const asignaturaSeleccionada = document.getElementById(\"asignatura\").value;\n\n    if (!grupoSeleccionado || !asignaturaSeleccionada) {\n        mostrarNotificacion(\"⚠️ Debes seleccionar un grupo y una asignatura antes de registrar.\");\n        return;\n    }\n\n    const datos = new FormData();\n    datos.append('estudiante', estudiante.nombre);\n    datos.append('codigoid', estudiante.codigo);\n    datos.append('reporte', reporte);\n    datos.append('comentario', comentario);\n    datos.append('grupo', grupoSeleccionado);\n    datos.append(\"asignaturaid\", asignaturaSeleccionada);\n\n    try {\n        console.log(\"📤 Enviando datos a la API...\", Object.fromEntries(datos)); // 🛠 DEPURACIÓN\n\n        const respuesta = await fetch(\"http://localhost:3002/api/asistencia\", {\n            method: 'POST',\n            body: datos\n        });\n\n        const resultado = await respuesta.json();\n        console.log(\"📥 Respuesta de la API:\", resultado); // 🛠 DEPURACIÓN\n\n        // ✅ Validar que la API devuelva exito: true\n        if (resultado.resultado === true) {\n            mostrarNotificacion(\"✅ Registro exitoso\");\n\n            // 🛠 DEPURACIÓN: Comprobar reportes antes de actualizar\n            console.log(\"🔄 Cargando reportes después del registro...\");\n\n            await consultarReportes(); // Recargar reportes\n            filtrarReportesPorEstudiante(estudiante.codigo); // Mostrar solo los del estudiante\n\n            // 🔄 Actualizar la información del estudiante en info-detallada\n            verEstudiante(estudiante.nombre, estudiante.codigo, estudiante.documento, estudiante.fechaNacimiento, estudiante.grupoid, estudiante.email);\n        } else {\n            console.error(\"⚠️ Error en la API:\", resultado);\n            mostrarNotificacion(\"⚠️ Error al registrar la novedad.\");\n        }\n    } catch (error) {\n        console.error(\"⚠️ Error en fetch:\", error);\n        mostrarNotificacion(\"⚠️ Error al registrar la novedad.\");\n    }\n}\n\n\n\nasync function eliminarReporte(id) {\n    if (!confirm(\"¿Estás seguro de que deseas eliminar este reporte?\")) {\n        return;\n    }\n\n    try {\n        const url = \"http://localhost:3002/api/eliminar-asistencia\"; // Asegúrate de que la ruta sea correcta\n\n        const formData = new FormData();\n        formData.append(\"id\", id);\n\n        const respuesta = await fetch(url, {\n            method: \"POST\",\n            body: formData\n        });\n\n        if (!respuesta.ok) {\n            throw new Error(\"Error al eliminar el reporte\");\n        }\n\n        const resultado = await respuesta.json();\n        console.log(\"Reporte eliminado:\", resultado);\n\n        // Volver a cargar los reportes desde la API\n        await consultarReportes();\n\n        // console.log(\"Código actual en estudiante_sel:\", estudiante_sel.codigo);\n\n        // Verificar si estudiante_sel.codigo tiene un valor válido antes de filtrar\n        if (estudiante_sel.codigo) {\n            filtrarReportesPorEstudiante(estudiante_sel.codigo);\n        } else {\n            console.warn(\"No hay estudiante seleccionado para filtrar reportes.\");\n        }\n\n        // Mostrar notificación\n        mostrarNotificacion(\"Reporte eliminado con éxito ❌\");\n\n    } catch (error) {\n        console.error(\"Error al eliminar reporte:\", error);\n        mostrarNotificacion(\"Error al eliminar el reporte ❌\");\n    }\n}\n\n\n// Reporte grupo completo\n\n// Función para verificar el estado del grupo seleccionado\nfunction verificarEstadoGrupo() {\n    const grupoId = document.getElementById(\"grupos\").value;\n    const botonGrupoCompleto = document.getElementById(\"grupo-completo\");\n\n    // Buscar si el grupo tiene el estado \"completo\" para la fecha actual\n    const grupo = estadoGrupos.find(\n        (g) => g.idgrupo == grupoId && g.completo === \"completo\" && g.fecha === hoy\n    );\n\n    // Deshabilitar o habilitar el botón según el estado del grupo\n    if (grupo) {\n        botonGrupoCompleto.disabled = true;\n        botonGrupoCompleto.classList.add('deshabilitado')\n        mostrarNotificacion(`El grupo está completo hoy 👍🏻`);\n    } else {\n        botonGrupoCompleto.disabled = false;\n    }\n}\n\n// Escucha el cambio en el selector de grupos\ndocument.getElementById(\"grupos\").addEventListener(\"change\", verificarEstadoGrupo);\n\n// Función para marcar un grupo como completo\ndocument.getElementById(\"grupo-completo\").addEventListener(\"click\", async function () {\n    const grupoId = document.getElementById(\"grupos\").value;\n    const fechaActual = new Date().toISOString().split(\"T\")[0]; // Fecha en formato YYYY-MM-DD\n\n    if (!grupoId) {\n        mostrarNotificacion(\"Seleccione un grupo\");\n        return;\n    }\n\n    const formData = new FormData();\n    formData.append(\"grupo\", grupoId);\n    formData.append(\"completo\", \"completo\");\n    formData.append(\"fecha\", fechaActual);\n\n    try {\n        const respuesta = await fetch(\"http://localhost:3002/api/grupo-completo\", {\n            method: \"POST\",\n            body: formData,\n        });\n\n        const resultado = await respuesta.json();\n\n        if (resultado.exito) {\n            mostrarNotificacion(\"Grupo marcado como completo 👍🏻\");\n            document.getElementById(\"grupo-completo\").disabled = true; // Desactivar el botón\n            await cargarEstadoGrupos(); // Recargar el estado de los grupos\n        } else {\n            alert(\"Error al actualizar el grupo\");\n        }\n    } catch (error) {\n        console.error(\"Error al marcar grupo completo:\", error);\n    }\n});\n\n// MODAL\n\n// function abrirModalComentario(estudiante, reporte) {\n//     estudianteActual = estudiante;\n//     tipoReporteActual = reporte;\n\n//     document.getElementById(\"comentarioEstudiante\").textContent = estudiante.nombre;\n//     document.getElementById(\"comentarioReporte\").textContent = reporte;\n//     document.getElementById(\"comentario\").value = \"\"; // Limpiar el campo de comentario\n\n//     document.getElementById(\"modalComentario\").style.display = \"block\";\n// }\n\n// function cerrarModalComentario() {\n//     document.getElementById(\"modalComentario\").style.display = \"none\";\n// }"]}